# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class ManagerItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'association': 'str',
        'description': 'str',
        'display_name': 'str',
        'gallery_image': 'str',
        'id': 'str',
        'links': 'list[Link]',
        'localized_scope_name': 'str',
        'name': 'str',
        'parent_folder': 'str',
        'parent_is_scope_folder': 'bool',
        'scope': 'str',
        'scope_owner': 'str',
        'stand_in_key': 'str'
    }

    attribute_map = {
        'association': 'association',
        'description': 'description',
        'display_name': 'displayName',
        'gallery_image': 'galleryImage',
        'id': 'id',
        'links': 'links',
        'localized_scope_name': 'localizedScopeName',
        'name': 'name',
        'parent_folder': 'parentFolder',
        'parent_is_scope_folder': 'parentIsScopeFolder',
        'scope': 'scope',
        'scope_owner': 'scopeOwner',
        'stand_in_key': 'standInKey'
    }

    def __init__(self, association=None, description=None, display_name=None, gallery_image=None, id=None, links=None, localized_scope_name=None, name=None, parent_folder=None, parent_is_scope_folder=None, scope=None, scope_owner=None, stand_in_key=None, local_vars_configuration=None):  # noqa: E501
        """ManagerItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._association = None
        self._description = None
        self._display_name = None
        self._gallery_image = None
        self._id = None
        self._links = None
        self._localized_scope_name = None
        self._name = None
        self._parent_folder = None
        self._parent_is_scope_folder = None
        self._scope = None
        self._scope_owner = None
        self._stand_in_key = None
        self.discriminator = None

        if association is not None:
            self.association = association
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if gallery_image is not None:
            self.gallery_image = gallery_image
        if id is not None:
            self.id = id
        if links is not None:
            self.links = links
        if localized_scope_name is not None:
            self.localized_scope_name = localized_scope_name
        if name is not None:
            self.name = name
        if parent_folder is not None:
            self.parent_folder = parent_folder
        if parent_is_scope_folder is not None:
            self.parent_is_scope_folder = parent_is_scope_folder
        if scope is not None:
            self.scope = scope
        if scope_owner is not None:
            self.scope_owner = scope_owner
        if stand_in_key is not None:
            self.stand_in_key = stand_in_key

    @property
    def association(self):
        """Gets the association of this ManagerItem.  # noqa: E501


        :return: The association of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this ManagerItem.


        :param association: The association of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._association = association

    @property
    def description(self):
        """Gets the description of this ManagerItem.  # noqa: E501


        :return: The description of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManagerItem.


        :param description: The description of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ManagerItem.  # noqa: E501


        :return: The display_name of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ManagerItem.


        :param display_name: The display_name of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def gallery_image(self):
        """Gets the gallery_image of this ManagerItem.  # noqa: E501


        :return: The gallery_image of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._gallery_image

    @gallery_image.setter
    def gallery_image(self, gallery_image):
        """Sets the gallery_image of this ManagerItem.


        :param gallery_image: The gallery_image of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._gallery_image = gallery_image

    @property
    def id(self):
        """Gets the id of this ManagerItem.  # noqa: E501


        :return: The id of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagerItem.


        :param id: The id of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def links(self):
        """Gets the links of this ManagerItem.  # noqa: E501


        :return: The links of this ManagerItem.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ManagerItem.


        :param links: The links of this ManagerItem.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def localized_scope_name(self):
        """Gets the localized_scope_name of this ManagerItem.  # noqa: E501


        :return: The localized_scope_name of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._localized_scope_name

    @localized_scope_name.setter
    def localized_scope_name(self, localized_scope_name):
        """Sets the localized_scope_name of this ManagerItem.


        :param localized_scope_name: The localized_scope_name of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._localized_scope_name = localized_scope_name

    @property
    def name(self):
        """Gets the name of this ManagerItem.  # noqa: E501


        :return: The name of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagerItem.


        :param name: The name of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_folder(self):
        """Gets the parent_folder of this ManagerItem.  # noqa: E501


        :return: The parent_folder of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder

    @parent_folder.setter
    def parent_folder(self, parent_folder):
        """Sets the parent_folder of this ManagerItem.


        :param parent_folder: The parent_folder of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._parent_folder = parent_folder

    @property
    def parent_is_scope_folder(self):
        """Gets the parent_is_scope_folder of this ManagerItem.  # noqa: E501


        :return: The parent_is_scope_folder of this ManagerItem.  # noqa: E501
        :rtype: bool
        """
        return self._parent_is_scope_folder

    @parent_is_scope_folder.setter
    def parent_is_scope_folder(self, parent_is_scope_folder):
        """Sets the parent_is_scope_folder of this ManagerItem.


        :param parent_is_scope_folder: The parent_is_scope_folder of this ManagerItem.  # noqa: E501
        :type: bool
        """

        self._parent_is_scope_folder = parent_is_scope_folder

    @property
    def scope(self):
        """Gets the scope of this ManagerItem.  # noqa: E501


        :return: The scope of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this ManagerItem.


        :param scope: The scope of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def scope_owner(self):
        """Gets the scope_owner of this ManagerItem.  # noqa: E501


        :return: The scope_owner of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner

    @scope_owner.setter
    def scope_owner(self, scope_owner):
        """Sets the scope_owner of this ManagerItem.


        :param scope_owner: The scope_owner of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._scope_owner = scope_owner

    @property
    def stand_in_key(self):
        """Gets the stand_in_key of this ManagerItem.  # noqa: E501


        :return: The stand_in_key of this ManagerItem.  # noqa: E501
        :rtype: str
        """
        return self._stand_in_key

    @stand_in_key.setter
    def stand_in_key(self, stand_in_key):
        """Sets the stand_in_key of this ManagerItem.


        :param stand_in_key: The stand_in_key of this ManagerItem.  # noqa: E501
        :type: str
        """

        self._stand_in_key = stand_in_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagerItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManagerItem):
            return True

        return self.to_dict() != other.to_dict()
