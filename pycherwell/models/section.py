# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class Section(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'section_fields': 'list[SectionField]',
        'gallery_image': 'str',
        'title': 'str',
        'relationship_id': 'str',
        'target_bus_ob_id': 'str',
        'target_bus_ob_rec_id': 'str'
    }

    attribute_map = {
        'section_fields': 'sectionFields',
        'gallery_image': 'galleryImage',
        'title': 'title',
        'relationship_id': 'relationshipId',
        'target_bus_ob_id': 'targetBusObId',
        'target_bus_ob_rec_id': 'targetBusObRecId'
    }

    def __init__(self, section_fields=None, gallery_image=None, title=None, relationship_id=None, target_bus_ob_id=None, target_bus_ob_rec_id=None, local_vars_configuration=None):  # noqa: E501
        """Section - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._section_fields = None
        self._gallery_image = None
        self._title = None
        self._relationship_id = None
        self._target_bus_ob_id = None
        self._target_bus_ob_rec_id = None
        self.discriminator = None

        if section_fields is not None:
            self.section_fields = section_fields
        if gallery_image is not None:
            self.gallery_image = gallery_image
        if title is not None:
            self.title = title
        if relationship_id is not None:
            self.relationship_id = relationship_id
        if target_bus_ob_id is not None:
            self.target_bus_ob_id = target_bus_ob_id
        if target_bus_ob_rec_id is not None:
            self.target_bus_ob_rec_id = target_bus_ob_rec_id

    @property
    def section_fields(self):
        """Gets the section_fields of this Section.  # noqa: E501


        :return: The section_fields of this Section.  # noqa: E501
        :rtype: list[SectionField]
        """
        return self._section_fields

    @section_fields.setter
    def section_fields(self, section_fields):
        """Sets the section_fields of this Section.


        :param section_fields: The section_fields of this Section.  # noqa: E501
        :type: list[SectionField]
        """

        self._section_fields = section_fields

    @property
    def gallery_image(self):
        """Gets the gallery_image of this Section.  # noqa: E501


        :return: The gallery_image of this Section.  # noqa: E501
        :rtype: str
        """
        return self._gallery_image

    @gallery_image.setter
    def gallery_image(self, gallery_image):
        """Sets the gallery_image of this Section.


        :param gallery_image: The gallery_image of this Section.  # noqa: E501
        :type: str
        """

        self._gallery_image = gallery_image

    @property
    def title(self):
        """Gets the title of this Section.  # noqa: E501


        :return: The title of this Section.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Section.


        :param title: The title of this Section.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def relationship_id(self):
        """Gets the relationship_id of this Section.  # noqa: E501


        :return: The relationship_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this Section.


        :param relationship_id: The relationship_id of this Section.  # noqa: E501
        :type: str
        """

        self._relationship_id = relationship_id

    @property
    def target_bus_ob_id(self):
        """Gets the target_bus_ob_id of this Section.  # noqa: E501


        :return: The target_bus_ob_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._target_bus_ob_id

    @target_bus_ob_id.setter
    def target_bus_ob_id(self, target_bus_ob_id):
        """Sets the target_bus_ob_id of this Section.


        :param target_bus_ob_id: The target_bus_ob_id of this Section.  # noqa: E501
        :type: str
        """

        self._target_bus_ob_id = target_bus_ob_id

    @property
    def target_bus_ob_rec_id(self):
        """Gets the target_bus_ob_rec_id of this Section.  # noqa: E501


        :return: The target_bus_ob_rec_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._target_bus_ob_rec_id

    @target_bus_ob_rec_id.setter
    def target_bus_ob_rec_id(self, target_bus_ob_rec_id):
        """Sets the target_bus_ob_rec_id of this Section.


        :param target_bus_ob_rec_id: The target_bus_ob_rec_id of this Section.  # noqa: E501
        :type: str
        """

        self._target_bus_ob_rec_id = target_bus_ob_rec_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Section):
            return True

        return self.to_dict() != other.to_dict()
