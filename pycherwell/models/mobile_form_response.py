# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class MobileFormResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'actions': 'list[Action]',
        'attachments': 'list[Attachment]',
        'gallery_image': 'str',
        'location_information': 'Location',
        'sections': 'list[Section]',
        'title': 'str',
        'error_code': 'str',
        'error_message': 'str',
        'has_error': 'bool'
    }

    attribute_map = {
        'actions': 'actions',
        'attachments': 'attachments',
        'gallery_image': 'galleryImage',
        'location_information': 'locationInformation',
        'sections': 'sections',
        'title': 'title',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'has_error': 'hasError'
    }

    def __init__(self, actions=None, attachments=None, gallery_image=None, location_information=None, sections=None, title=None, error_code=None, error_message=None, has_error=None, local_vars_configuration=None):  # noqa: E501
        """MobileFormResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._actions = None
        self._attachments = None
        self._gallery_image = None
        self._location_information = None
        self._sections = None
        self._title = None
        self._error_code = None
        self._error_message = None
        self._has_error = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if attachments is not None:
            self.attachments = attachments
        if gallery_image is not None:
            self.gallery_image = gallery_image
        if location_information is not None:
            self.location_information = location_information
        if sections is not None:
            self.sections = sections
        if title is not None:
            self.title = title
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if has_error is not None:
            self.has_error = has_error

    @property
    def actions(self):
        """Gets the actions of this MobileFormResponse.  # noqa: E501


        :return: The actions of this MobileFormResponse.  # noqa: E501
        :rtype: list[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this MobileFormResponse.


        :param actions: The actions of this MobileFormResponse.  # noqa: E501
        :type: list[Action]
        """

        self._actions = actions

    @property
    def attachments(self):
        """Gets the attachments of this MobileFormResponse.  # noqa: E501


        :return: The attachments of this MobileFormResponse.  # noqa: E501
        :rtype: list[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MobileFormResponse.


        :param attachments: The attachments of this MobileFormResponse.  # noqa: E501
        :type: list[Attachment]
        """

        self._attachments = attachments

    @property
    def gallery_image(self):
        """Gets the gallery_image of this MobileFormResponse.  # noqa: E501


        :return: The gallery_image of this MobileFormResponse.  # noqa: E501
        :rtype: str
        """
        return self._gallery_image

    @gallery_image.setter
    def gallery_image(self, gallery_image):
        """Sets the gallery_image of this MobileFormResponse.


        :param gallery_image: The gallery_image of this MobileFormResponse.  # noqa: E501
        :type: str
        """

        self._gallery_image = gallery_image

    @property
    def location_information(self):
        """Gets the location_information of this MobileFormResponse.  # noqa: E501


        :return: The location_information of this MobileFormResponse.  # noqa: E501
        :rtype: Location
        """
        return self._location_information

    @location_information.setter
    def location_information(self, location_information):
        """Sets the location_information of this MobileFormResponse.


        :param location_information: The location_information of this MobileFormResponse.  # noqa: E501
        :type: Location
        """

        self._location_information = location_information

    @property
    def sections(self):
        """Gets the sections of this MobileFormResponse.  # noqa: E501


        :return: The sections of this MobileFormResponse.  # noqa: E501
        :rtype: list[Section]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this MobileFormResponse.


        :param sections: The sections of this MobileFormResponse.  # noqa: E501
        :type: list[Section]
        """

        self._sections = sections

    @property
    def title(self):
        """Gets the title of this MobileFormResponse.  # noqa: E501


        :return: The title of this MobileFormResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MobileFormResponse.


        :param title: The title of this MobileFormResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def error_code(self):
        """Gets the error_code of this MobileFormResponse.  # noqa: E501


        :return: The error_code of this MobileFormResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this MobileFormResponse.


        :param error_code: The error_code of this MobileFormResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this MobileFormResponse.  # noqa: E501


        :return: The error_message of this MobileFormResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MobileFormResponse.


        :param error_message: The error_message of this MobileFormResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def has_error(self):
        """Gets the has_error of this MobileFormResponse.  # noqa: E501


        :return: The has_error of this MobileFormResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this MobileFormResponse.


        :param has_error: The has_error of this MobileFormResponse.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MobileFormResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MobileFormResponse):
            return True

        return self.to_dict() != other.to_dict()
