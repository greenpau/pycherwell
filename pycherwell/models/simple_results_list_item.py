# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class SimpleResultsListItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bus_ob_id': 'str',
        'bus_ob_rec_id': 'str',
        'doc_repository_item_id': 'str',
        'gallery_image': 'str',
        'links': 'list[Link]',
        'public_id': 'str',
        'scope': 'str',
        'scope_owner': 'str',
        'sub_title': 'str',
        'text': 'str',
        'title': 'str'
    }

    attribute_map = {
        'bus_ob_id': 'busObId',
        'bus_ob_rec_id': 'busObRecId',
        'doc_repository_item_id': 'docRepositoryItemId',
        'gallery_image': 'galleryImage',
        'links': 'links',
        'public_id': 'publicId',
        'scope': 'scope',
        'scope_owner': 'scopeOwner',
        'sub_title': 'subTitle',
        'text': 'text',
        'title': 'title'
    }

    def __init__(self, bus_ob_id=None, bus_ob_rec_id=None, doc_repository_item_id=None, gallery_image=None, links=None, public_id=None, scope=None, scope_owner=None, sub_title=None, text=None, title=None, local_vars_configuration=None):  # noqa: E501
        """SimpleResultsListItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bus_ob_id = None
        self._bus_ob_rec_id = None
        self._doc_repository_item_id = None
        self._gallery_image = None
        self._links = None
        self._public_id = None
        self._scope = None
        self._scope_owner = None
        self._sub_title = None
        self._text = None
        self._title = None
        self.discriminator = None

        if bus_ob_id is not None:
            self.bus_ob_id = bus_ob_id
        if bus_ob_rec_id is not None:
            self.bus_ob_rec_id = bus_ob_rec_id
        if doc_repository_item_id is not None:
            self.doc_repository_item_id = doc_repository_item_id
        if gallery_image is not None:
            self.gallery_image = gallery_image
        if links is not None:
            self.links = links
        if public_id is not None:
            self.public_id = public_id
        if scope is not None:
            self.scope = scope
        if scope_owner is not None:
            self.scope_owner = scope_owner
        if sub_title is not None:
            self.sub_title = sub_title
        if text is not None:
            self.text = text
        if title is not None:
            self.title = title

    @property
    def bus_ob_id(self):
        """Gets the bus_ob_id of this SimpleResultsListItem.  # noqa: E501


        :return: The bus_ob_id of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._bus_ob_id

    @bus_ob_id.setter
    def bus_ob_id(self, bus_ob_id):
        """Sets the bus_ob_id of this SimpleResultsListItem.


        :param bus_ob_id: The bus_ob_id of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._bus_ob_id = bus_ob_id

    @property
    def bus_ob_rec_id(self):
        """Gets the bus_ob_rec_id of this SimpleResultsListItem.  # noqa: E501


        :return: The bus_ob_rec_id of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._bus_ob_rec_id

    @bus_ob_rec_id.setter
    def bus_ob_rec_id(self, bus_ob_rec_id):
        """Sets the bus_ob_rec_id of this SimpleResultsListItem.


        :param bus_ob_rec_id: The bus_ob_rec_id of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._bus_ob_rec_id = bus_ob_rec_id

    @property
    def doc_repository_item_id(self):
        """Gets the doc_repository_item_id of this SimpleResultsListItem.  # noqa: E501


        :return: The doc_repository_item_id of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._doc_repository_item_id

    @doc_repository_item_id.setter
    def doc_repository_item_id(self, doc_repository_item_id):
        """Sets the doc_repository_item_id of this SimpleResultsListItem.


        :param doc_repository_item_id: The doc_repository_item_id of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._doc_repository_item_id = doc_repository_item_id

    @property
    def gallery_image(self):
        """Gets the gallery_image of this SimpleResultsListItem.  # noqa: E501


        :return: The gallery_image of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._gallery_image

    @gallery_image.setter
    def gallery_image(self, gallery_image):
        """Sets the gallery_image of this SimpleResultsListItem.


        :param gallery_image: The gallery_image of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._gallery_image = gallery_image

    @property
    def links(self):
        """Gets the links of this SimpleResultsListItem.  # noqa: E501


        :return: The links of this SimpleResultsListItem.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SimpleResultsListItem.


        :param links: The links of this SimpleResultsListItem.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def public_id(self):
        """Gets the public_id of this SimpleResultsListItem.  # noqa: E501


        :return: The public_id of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this SimpleResultsListItem.


        :param public_id: The public_id of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._public_id = public_id

    @property
    def scope(self):
        """Gets the scope of this SimpleResultsListItem.  # noqa: E501


        :return: The scope of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SimpleResultsListItem.


        :param scope: The scope of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def scope_owner(self):
        """Gets the scope_owner of this SimpleResultsListItem.  # noqa: E501


        :return: The scope_owner of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner

    @scope_owner.setter
    def scope_owner(self, scope_owner):
        """Sets the scope_owner of this SimpleResultsListItem.


        :param scope_owner: The scope_owner of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._scope_owner = scope_owner

    @property
    def sub_title(self):
        """Gets the sub_title of this SimpleResultsListItem.  # noqa: E501


        :return: The sub_title of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this SimpleResultsListItem.


        :param sub_title: The sub_title of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def text(self):
        """Gets the text of this SimpleResultsListItem.  # noqa: E501


        :return: The text of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SimpleResultsListItem.


        :param text: The text of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def title(self):
        """Gets the title of this SimpleResultsListItem.  # noqa: E501


        :return: The title of this SimpleResultsListItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SimpleResultsListItem.


        :param title: The title of this SimpleResultsListItem.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleResultsListItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleResultsListItem):
            return True

        return self.to_dict() != other.to_dict()
