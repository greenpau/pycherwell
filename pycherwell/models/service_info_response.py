# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class ServiceInfoResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'csm_culture': 'str',
        'csm_version': 'str',
        'system_date_time': 'datetime',
        'time_zone': 'object'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'csm_culture': 'csmCulture',
        'csm_version': 'csmVersion',
        'system_date_time': 'systemDateTime',
        'time_zone': 'timeZone'
    }

    def __init__(self, api_version=None, csm_culture=None, csm_version=None, system_date_time=None, time_zone=None, local_vars_configuration=None):  # noqa: E501
        """ServiceInfoResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._csm_culture = None
        self._csm_version = None
        self._system_date_time = None
        self._time_zone = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if csm_culture is not None:
            self.csm_culture = csm_culture
        if csm_version is not None:
            self.csm_version = csm_version
        if system_date_time is not None:
            self.system_date_time = system_date_time
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def api_version(self):
        """Gets the api_version of this ServiceInfoResponse.  # noqa: E501


        :return: The api_version of this ServiceInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this ServiceInfoResponse.


        :param api_version: The api_version of this ServiceInfoResponse.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def csm_culture(self):
        """Gets the csm_culture of this ServiceInfoResponse.  # noqa: E501


        :return: The csm_culture of this ServiceInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._csm_culture

    @csm_culture.setter
    def csm_culture(self, csm_culture):
        """Sets the csm_culture of this ServiceInfoResponse.


        :param csm_culture: The csm_culture of this ServiceInfoResponse.  # noqa: E501
        :type: str
        """

        self._csm_culture = csm_culture

    @property
    def csm_version(self):
        """Gets the csm_version of this ServiceInfoResponse.  # noqa: E501


        :return: The csm_version of this ServiceInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._csm_version

    @csm_version.setter
    def csm_version(self, csm_version):
        """Sets the csm_version of this ServiceInfoResponse.


        :param csm_version: The csm_version of this ServiceInfoResponse.  # noqa: E501
        :type: str
        """

        self._csm_version = csm_version

    @property
    def system_date_time(self):
        """Gets the system_date_time of this ServiceInfoResponse.  # noqa: E501


        :return: The system_date_time of this ServiceInfoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._system_date_time

    @system_date_time.setter
    def system_date_time(self, system_date_time):
        """Sets the system_date_time of this ServiceInfoResponse.


        :param system_date_time: The system_date_time of this ServiceInfoResponse.  # noqa: E501
        :type: datetime
        """

        self._system_date_time = system_date_time

    @property
    def time_zone(self):
        """Gets the time_zone of this ServiceInfoResponse.  # noqa: E501


        :return: The time_zone of this ServiceInfoResponse.  # noqa: E501
        :rtype: object
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ServiceInfoResponse.


        :param time_zone: The time_zone of this ServiceInfoResponse.  # noqa: E501
        :type: object
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceInfoResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceInfoResponse):
            return True

        return self.to_dict() != other.to_dict()
