# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class QuickSearchByIdRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bus_ob_ids': 'list[str]',
        'is_general': 'bool',
        'search_text': 'str',
        'stand_in': 'str'
    }

    attribute_map = {
        'bus_ob_ids': 'busObIds',
        'is_general': 'isGeneral',
        'search_text': 'searchText',
        'stand_in': 'standIn'
    }

    def __init__(self, bus_ob_ids=None, is_general=None, search_text=None, stand_in=None, local_vars_configuration=None):  # noqa: E501
        """QuickSearchByIdRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bus_ob_ids = None
        self._is_general = None
        self._search_text = None
        self._stand_in = None
        self.discriminator = None

        if bus_ob_ids is not None:
            self.bus_ob_ids = bus_ob_ids
        if is_general is not None:
            self.is_general = is_general
        if search_text is not None:
            self.search_text = search_text
        if stand_in is not None:
            self.stand_in = stand_in

    @property
    def bus_ob_ids(self):
        """Gets the bus_ob_ids of this QuickSearchByIdRequest.  # noqa: E501


        :return: The bus_ob_ids of this QuickSearchByIdRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._bus_ob_ids

    @bus_ob_ids.setter
    def bus_ob_ids(self, bus_ob_ids):
        """Sets the bus_ob_ids of this QuickSearchByIdRequest.


        :param bus_ob_ids: The bus_ob_ids of this QuickSearchByIdRequest.  # noqa: E501
        :type: list[str]
        """

        self._bus_ob_ids = bus_ob_ids

    @property
    def is_general(self):
        """Gets the is_general of this QuickSearchByIdRequest.  # noqa: E501


        :return: The is_general of this QuickSearchByIdRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_general

    @is_general.setter
    def is_general(self, is_general):
        """Sets the is_general of this QuickSearchByIdRequest.


        :param is_general: The is_general of this QuickSearchByIdRequest.  # noqa: E501
        :type: bool
        """

        self._is_general = is_general

    @property
    def search_text(self):
        """Gets the search_text of this QuickSearchByIdRequest.  # noqa: E501


        :return: The search_text of this QuickSearchByIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this QuickSearchByIdRequest.


        :param search_text: The search_text of this QuickSearchByIdRequest.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def stand_in(self):
        """Gets the stand_in of this QuickSearchByIdRequest.  # noqa: E501


        :return: The stand_in of this QuickSearchByIdRequest.  # noqa: E501
        :rtype: str
        """
        return self._stand_in

    @stand_in.setter
    def stand_in(self, stand_in):
        """Sets the stand_in of this QuickSearchByIdRequest.


        :param stand_in: The stand_in of this QuickSearchByIdRequest.  # noqa: E501
        :type: str
        """

        self._stand_in = stand_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickSearchByIdRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuickSearchByIdRequest):
            return True

        return self.to_dict() != other.to_dict()
