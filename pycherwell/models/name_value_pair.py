# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class NameValuePair(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'value_object': 'object',
        'value_string': 'str',
        'category': 'str',
        'description': 'str',
        'display_shows_value': 'bool',
        'special_use_flag': 'bool',
        'display_string': 'str'
    }

    attribute_map = {
        'name': 'name',
        'value_object': 'valueObject',
        'value_string': 'valueString',
        'category': 'category',
        'description': 'description',
        'display_shows_value': 'displayShowsValue',
        'special_use_flag': 'specialUseFlag',
        'display_string': 'displayString'
    }

    def __init__(self, name=None, value_object=None, value_string=None, category=None, description=None, display_shows_value=None, special_use_flag=None, display_string=None, local_vars_configuration=None):  # noqa: E501
        """NameValuePair - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._value_object = None
        self._value_string = None
        self._category = None
        self._description = None
        self._display_shows_value = None
        self._special_use_flag = None
        self._display_string = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if value_object is not None:
            self.value_object = value_object
        if value_string is not None:
            self.value_string = value_string
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if display_shows_value is not None:
            self.display_shows_value = display_shows_value
        if special_use_flag is not None:
            self.special_use_flag = special_use_flag
        if display_string is not None:
            self.display_string = display_string

    @property
    def name(self):
        """Gets the name of this NameValuePair.  # noqa: E501


        :return: The name of this NameValuePair.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NameValuePair.


        :param name: The name of this NameValuePair.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value_object(self):
        """Gets the value_object of this NameValuePair.  # noqa: E501


        :return: The value_object of this NameValuePair.  # noqa: E501
        :rtype: object
        """
        return self._value_object

    @value_object.setter
    def value_object(self, value_object):
        """Sets the value_object of this NameValuePair.


        :param value_object: The value_object of this NameValuePair.  # noqa: E501
        :type: object
        """

        self._value_object = value_object

    @property
    def value_string(self):
        """Gets the value_string of this NameValuePair.  # noqa: E501


        :return: The value_string of this NameValuePair.  # noqa: E501
        :rtype: str
        """
        return self._value_string

    @value_string.setter
    def value_string(self, value_string):
        """Sets the value_string of this NameValuePair.


        :param value_string: The value_string of this NameValuePair.  # noqa: E501
        :type: str
        """

        self._value_string = value_string

    @property
    def category(self):
        """Gets the category of this NameValuePair.  # noqa: E501


        :return: The category of this NameValuePair.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this NameValuePair.


        :param category: The category of this NameValuePair.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this NameValuePair.  # noqa: E501


        :return: The description of this NameValuePair.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NameValuePair.


        :param description: The description of this NameValuePair.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_shows_value(self):
        """Gets the display_shows_value of this NameValuePair.  # noqa: E501


        :return: The display_shows_value of this NameValuePair.  # noqa: E501
        :rtype: bool
        """
        return self._display_shows_value

    @display_shows_value.setter
    def display_shows_value(self, display_shows_value):
        """Sets the display_shows_value of this NameValuePair.


        :param display_shows_value: The display_shows_value of this NameValuePair.  # noqa: E501
        :type: bool
        """

        self._display_shows_value = display_shows_value

    @property
    def special_use_flag(self):
        """Gets the special_use_flag of this NameValuePair.  # noqa: E501


        :return: The special_use_flag of this NameValuePair.  # noqa: E501
        :rtype: bool
        """
        return self._special_use_flag

    @special_use_flag.setter
    def special_use_flag(self, special_use_flag):
        """Sets the special_use_flag of this NameValuePair.


        :param special_use_flag: The special_use_flag of this NameValuePair.  # noqa: E501
        :type: bool
        """

        self._special_use_flag = special_use_flag

    @property
    def display_string(self):
        """Gets the display_string of this NameValuePair.  # noqa: E501


        :return: The display_string of this NameValuePair.  # noqa: E501
        :rtype: str
        """
        return self._display_string

    @display_string.setter
    def display_string(self, display_string):
        """Sets the display_string of this NameValuePair.


        :param display_string: The display_string of this NameValuePair.  # noqa: E501
        :type: str
        """

        self._display_string = display_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NameValuePair):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NameValuePair):
            return True

        return self.to_dict() != other.to_dict()
