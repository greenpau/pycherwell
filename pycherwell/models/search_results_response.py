# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class SearchResultsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'business_objects': 'list[ReadResponse]',
        'has_prompts': 'bool',
        'links': 'list[Link]',
        'prompts': 'list[Prompt]',
        'search_results_fields': 'list[Field]',
        'simple_results': 'SimpleResultsList',
        'total_rows': 'int',
        'error_code': 'str',
        'error_message': 'str',
        'has_error': 'bool'
    }

    attribute_map = {
        'business_objects': 'businessObjects',
        'has_prompts': 'hasPrompts',
        'links': 'links',
        'prompts': 'prompts',
        'search_results_fields': 'searchResultsFields',
        'simple_results': 'simpleResults',
        'total_rows': 'totalRows',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'has_error': 'hasError'
    }

    def __init__(self, business_objects=None, has_prompts=None, links=None, prompts=None, search_results_fields=None, simple_results=None, total_rows=None, error_code=None, error_message=None, has_error=None, local_vars_configuration=None):  # noqa: E501
        """SearchResultsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._business_objects = None
        self._has_prompts = None
        self._links = None
        self._prompts = None
        self._search_results_fields = None
        self._simple_results = None
        self._total_rows = None
        self._error_code = None
        self._error_message = None
        self._has_error = None
        self.discriminator = None

        if business_objects is not None:
            self.business_objects = business_objects
        if has_prompts is not None:
            self.has_prompts = has_prompts
        if links is not None:
            self.links = links
        if prompts is not None:
            self.prompts = prompts
        if search_results_fields is not None:
            self.search_results_fields = search_results_fields
        if simple_results is not None:
            self.simple_results = simple_results
        if total_rows is not None:
            self.total_rows = total_rows
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if has_error is not None:
            self.has_error = has_error

    @property
    def business_objects(self):
        """Gets the business_objects of this SearchResultsResponse.  # noqa: E501


        :return: The business_objects of this SearchResultsResponse.  # noqa: E501
        :rtype: list[ReadResponse]
        """
        return self._business_objects

    @business_objects.setter
    def business_objects(self, business_objects):
        """Sets the business_objects of this SearchResultsResponse.


        :param business_objects: The business_objects of this SearchResultsResponse.  # noqa: E501
        :type: list[ReadResponse]
        """

        self._business_objects = business_objects

    @property
    def has_prompts(self):
        """Gets the has_prompts of this SearchResultsResponse.  # noqa: E501


        :return: The has_prompts of this SearchResultsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_prompts

    @has_prompts.setter
    def has_prompts(self, has_prompts):
        """Sets the has_prompts of this SearchResultsResponse.


        :param has_prompts: The has_prompts of this SearchResultsResponse.  # noqa: E501
        :type: bool
        """

        self._has_prompts = has_prompts

    @property
    def links(self):
        """Gets the links of this SearchResultsResponse.  # noqa: E501


        :return: The links of this SearchResultsResponse.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SearchResultsResponse.


        :param links: The links of this SearchResultsResponse.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def prompts(self):
        """Gets the prompts of this SearchResultsResponse.  # noqa: E501


        :return: The prompts of this SearchResultsResponse.  # noqa: E501
        :rtype: list[Prompt]
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts):
        """Sets the prompts of this SearchResultsResponse.


        :param prompts: The prompts of this SearchResultsResponse.  # noqa: E501
        :type: list[Prompt]
        """

        self._prompts = prompts

    @property
    def search_results_fields(self):
        """Gets the search_results_fields of this SearchResultsResponse.  # noqa: E501


        :return: The search_results_fields of this SearchResultsResponse.  # noqa: E501
        :rtype: list[Field]
        """
        return self._search_results_fields

    @search_results_fields.setter
    def search_results_fields(self, search_results_fields):
        """Sets the search_results_fields of this SearchResultsResponse.


        :param search_results_fields: The search_results_fields of this SearchResultsResponse.  # noqa: E501
        :type: list[Field]
        """

        self._search_results_fields = search_results_fields

    @property
    def simple_results(self):
        """Gets the simple_results of this SearchResultsResponse.  # noqa: E501


        :return: The simple_results of this SearchResultsResponse.  # noqa: E501
        :rtype: SimpleResultsList
        """
        return self._simple_results

    @simple_results.setter
    def simple_results(self, simple_results):
        """Sets the simple_results of this SearchResultsResponse.


        :param simple_results: The simple_results of this SearchResultsResponse.  # noqa: E501
        :type: SimpleResultsList
        """

        self._simple_results = simple_results

    @property
    def total_rows(self):
        """Gets the total_rows of this SearchResultsResponse.  # noqa: E501


        :return: The total_rows of this SearchResultsResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_rows

    @total_rows.setter
    def total_rows(self, total_rows):
        """Sets the total_rows of this SearchResultsResponse.


        :param total_rows: The total_rows of this SearchResultsResponse.  # noqa: E501
        :type: int
        """

        self._total_rows = total_rows

    @property
    def error_code(self):
        """Gets the error_code of this SearchResultsResponse.  # noqa: E501


        :return: The error_code of this SearchResultsResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SearchResultsResponse.


        :param error_code: The error_code of this SearchResultsResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this SearchResultsResponse.  # noqa: E501


        :return: The error_message of this SearchResultsResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SearchResultsResponse.


        :param error_message: The error_message of this SearchResultsResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def has_error(self):
        """Gets the has_error of this SearchResultsResponse.  # noqa: E501


        :return: The has_error of this SearchResultsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this SearchResultsResponse.


        :param has_error: The has_error of this SearchResultsResponse.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResultsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchResultsResponse):
            return True

        return self.to_dict() != other.to_dict()
