# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class Relationship(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cardinality': 'str',
        'description': 'str',
        'display_name': 'str',
        'field_definitions': 'list[FieldDefinition]',
        'relationship_id': 'str',
        'target': 'str'
    }

    attribute_map = {
        'cardinality': 'cardinality',
        'description': 'description',
        'display_name': 'displayName',
        'field_definitions': 'fieldDefinitions',
        'relationship_id': 'relationshipId',
        'target': 'target'
    }

    def __init__(self, cardinality=None, description=None, display_name=None, field_definitions=None, relationship_id=None, target=None, local_vars_configuration=None):  # noqa: E501
        """Relationship - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cardinality = None
        self._description = None
        self._display_name = None
        self._field_definitions = None
        self._relationship_id = None
        self._target = None
        self.discriminator = None

        if cardinality is not None:
            self.cardinality = cardinality
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if field_definitions is not None:
            self.field_definitions = field_definitions
        if relationship_id is not None:
            self.relationship_id = relationship_id
        if target is not None:
            self.target = target

    @property
    def cardinality(self):
        """Gets the cardinality of this Relationship.  # noqa: E501


        :return: The cardinality of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this Relationship.


        :param cardinality: The cardinality of this Relationship.  # noqa: E501
        :type: str
        """

        self._cardinality = cardinality

    @property
    def description(self):
        """Gets the description of this Relationship.  # noqa: E501


        :return: The description of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Relationship.


        :param description: The description of this Relationship.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Relationship.  # noqa: E501


        :return: The display_name of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Relationship.


        :param display_name: The display_name of this Relationship.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def field_definitions(self):
        """Gets the field_definitions of this Relationship.  # noqa: E501


        :return: The field_definitions of this Relationship.  # noqa: E501
        :rtype: list[FieldDefinition]
        """
        return self._field_definitions

    @field_definitions.setter
    def field_definitions(self, field_definitions):
        """Sets the field_definitions of this Relationship.


        :param field_definitions: The field_definitions of this Relationship.  # noqa: E501
        :type: list[FieldDefinition]
        """

        self._field_definitions = field_definitions

    @property
    def relationship_id(self):
        """Gets the relationship_id of this Relationship.  # noqa: E501


        :return: The relationship_id of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._relationship_id

    @relationship_id.setter
    def relationship_id(self, relationship_id):
        """Sets the relationship_id of this Relationship.


        :param relationship_id: The relationship_id of this Relationship.  # noqa: E501
        :type: str
        """

        self._relationship_id = relationship_id

    @property
    def target(self):
        """Gets the target of this Relationship.  # noqa: E501


        :return: The target of this Relationship.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Relationship.


        :param target: The target of this Relationship.  # noqa: E501
        :type: str
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relationship):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Relationship):
            return True

        return self.to_dict() != other.to_dict()
