# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class PromptValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bus_ob_id': 'str',
        'collection_store_entire_row': 'str',
        'collection_value_field': 'str',
        'field_id': 'str',
        'list_return_field_id': 'str',
        'prompt_id': 'str',
        'value': 'object',
        'value_is_rec_id': 'bool'
    }

    attribute_map = {
        'bus_ob_id': 'busObId',
        'collection_store_entire_row': 'collectionStoreEntireRow',
        'collection_value_field': 'collectionValueField',
        'field_id': 'fieldId',
        'list_return_field_id': 'listReturnFieldId',
        'prompt_id': 'promptId',
        'value': 'value',
        'value_is_rec_id': 'valueIsRecId'
    }

    def __init__(self, bus_ob_id=None, collection_store_entire_row=None, collection_value_field=None, field_id=None, list_return_field_id=None, prompt_id=None, value=None, value_is_rec_id=None, local_vars_configuration=None):  # noqa: E501
        """PromptValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bus_ob_id = None
        self._collection_store_entire_row = None
        self._collection_value_field = None
        self._field_id = None
        self._list_return_field_id = None
        self._prompt_id = None
        self._value = None
        self._value_is_rec_id = None
        self.discriminator = None

        if bus_ob_id is not None:
            self.bus_ob_id = bus_ob_id
        if collection_store_entire_row is not None:
            self.collection_store_entire_row = collection_store_entire_row
        if collection_value_field is not None:
            self.collection_value_field = collection_value_field
        if field_id is not None:
            self.field_id = field_id
        if list_return_field_id is not None:
            self.list_return_field_id = list_return_field_id
        if prompt_id is not None:
            self.prompt_id = prompt_id
        if value is not None:
            self.value = value
        if value_is_rec_id is not None:
            self.value_is_rec_id = value_is_rec_id

    @property
    def bus_ob_id(self):
        """Gets the bus_ob_id of this PromptValue.  # noqa: E501


        :return: The bus_ob_id of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._bus_ob_id

    @bus_ob_id.setter
    def bus_ob_id(self, bus_ob_id):
        """Sets the bus_ob_id of this PromptValue.


        :param bus_ob_id: The bus_ob_id of this PromptValue.  # noqa: E501
        :type: str
        """

        self._bus_ob_id = bus_ob_id

    @property
    def collection_store_entire_row(self):
        """Gets the collection_store_entire_row of this PromptValue.  # noqa: E501


        :return: The collection_store_entire_row of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._collection_store_entire_row

    @collection_store_entire_row.setter
    def collection_store_entire_row(self, collection_store_entire_row):
        """Sets the collection_store_entire_row of this PromptValue.


        :param collection_store_entire_row: The collection_store_entire_row of this PromptValue.  # noqa: E501
        :type: str
        """

        self._collection_store_entire_row = collection_store_entire_row

    @property
    def collection_value_field(self):
        """Gets the collection_value_field of this PromptValue.  # noqa: E501


        :return: The collection_value_field of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._collection_value_field

    @collection_value_field.setter
    def collection_value_field(self, collection_value_field):
        """Sets the collection_value_field of this PromptValue.


        :param collection_value_field: The collection_value_field of this PromptValue.  # noqa: E501
        :type: str
        """

        self._collection_value_field = collection_value_field

    @property
    def field_id(self):
        """Gets the field_id of this PromptValue.  # noqa: E501


        :return: The field_id of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this PromptValue.


        :param field_id: The field_id of this PromptValue.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def list_return_field_id(self):
        """Gets the list_return_field_id of this PromptValue.  # noqa: E501


        :return: The list_return_field_id of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._list_return_field_id

    @list_return_field_id.setter
    def list_return_field_id(self, list_return_field_id):
        """Sets the list_return_field_id of this PromptValue.


        :param list_return_field_id: The list_return_field_id of this PromptValue.  # noqa: E501
        :type: str
        """

        self._list_return_field_id = list_return_field_id

    @property
    def prompt_id(self):
        """Gets the prompt_id of this PromptValue.  # noqa: E501


        :return: The prompt_id of this PromptValue.  # noqa: E501
        :rtype: str
        """
        return self._prompt_id

    @prompt_id.setter
    def prompt_id(self, prompt_id):
        """Sets the prompt_id of this PromptValue.


        :param prompt_id: The prompt_id of this PromptValue.  # noqa: E501
        :type: str
        """

        self._prompt_id = prompt_id

    @property
    def value(self):
        """Gets the value of this PromptValue.  # noqa: E501


        :return: The value of this PromptValue.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PromptValue.


        :param value: The value of this PromptValue.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def value_is_rec_id(self):
        """Gets the value_is_rec_id of this PromptValue.  # noqa: E501


        :return: The value_is_rec_id of this PromptValue.  # noqa: E501
        :rtype: bool
        """
        return self._value_is_rec_id

    @value_is_rec_id.setter
    def value_is_rec_id(self, value_is_rec_id):
        """Sets the value_is_rec_id of this PromptValue.


        :param value_is_rec_id: The value_is_rec_id of this PromptValue.  # noqa: E501
        :type: bool
        """

        self._value_is_rec_id = value_is_rec_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PromptValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PromptValue):
            return True

        return self.to_dict() != other.to_dict()
