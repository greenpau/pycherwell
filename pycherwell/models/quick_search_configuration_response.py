# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class QuickSearchConfigurationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_quick_search': 'bool',
        'allow_specific_search': 'bool',
        'default_to_quick_search': 'bool',
        'display_name': 'str',
        'gallery_image': 'str',
        'history': 'list[str]',
        'include_available_in_specific': 'bool',
        'include_quick_search_in_specific': 'bool',
        'quick_search_id': 'str',
        'quick_search_items': 'list[QuickSearchItem]',
        'quick_search_watermark': 'str',
        'resolved_quick_search_watermark': 'str',
        'scope': 'str',
        'scope_owner': 'str',
        'specific_search_items': 'list[QuickSearchItem]',
        'error_code': 'str',
        'error_message': 'str',
        'has_error': 'bool'
    }

    attribute_map = {
        'allow_quick_search': 'allowQuickSearch',
        'allow_specific_search': 'allowSpecificSearch',
        'default_to_quick_search': 'defaultToQuickSearch',
        'display_name': 'displayName',
        'gallery_image': 'galleryImage',
        'history': 'history',
        'include_available_in_specific': 'includeAvailableInSpecific',
        'include_quick_search_in_specific': 'includeQuickSearchInSpecific',
        'quick_search_id': 'quickSearchId',
        'quick_search_items': 'quickSearchItems',
        'quick_search_watermark': 'quickSearchWatermark',
        'resolved_quick_search_watermark': 'resolvedQuickSearchWatermark',
        'scope': 'scope',
        'scope_owner': 'scopeOwner',
        'specific_search_items': 'specificSearchItems',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'has_error': 'hasError'
    }

    def __init__(self, allow_quick_search=None, allow_specific_search=None, default_to_quick_search=None, display_name=None, gallery_image=None, history=None, include_available_in_specific=None, include_quick_search_in_specific=None, quick_search_id=None, quick_search_items=None, quick_search_watermark=None, resolved_quick_search_watermark=None, scope=None, scope_owner=None, specific_search_items=None, error_code=None, error_message=None, has_error=None, local_vars_configuration=None):  # noqa: E501
        """QuickSearchConfigurationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allow_quick_search = None
        self._allow_specific_search = None
        self._default_to_quick_search = None
        self._display_name = None
        self._gallery_image = None
        self._history = None
        self._include_available_in_specific = None
        self._include_quick_search_in_specific = None
        self._quick_search_id = None
        self._quick_search_items = None
        self._quick_search_watermark = None
        self._resolved_quick_search_watermark = None
        self._scope = None
        self._scope_owner = None
        self._specific_search_items = None
        self._error_code = None
        self._error_message = None
        self._has_error = None
        self.discriminator = None

        if allow_quick_search is not None:
            self.allow_quick_search = allow_quick_search
        if allow_specific_search is not None:
            self.allow_specific_search = allow_specific_search
        if default_to_quick_search is not None:
            self.default_to_quick_search = default_to_quick_search
        if display_name is not None:
            self.display_name = display_name
        if gallery_image is not None:
            self.gallery_image = gallery_image
        if history is not None:
            self.history = history
        if include_available_in_specific is not None:
            self.include_available_in_specific = include_available_in_specific
        if include_quick_search_in_specific is not None:
            self.include_quick_search_in_specific = include_quick_search_in_specific
        if quick_search_id is not None:
            self.quick_search_id = quick_search_id
        if quick_search_items is not None:
            self.quick_search_items = quick_search_items
        if quick_search_watermark is not None:
            self.quick_search_watermark = quick_search_watermark
        if resolved_quick_search_watermark is not None:
            self.resolved_quick_search_watermark = resolved_quick_search_watermark
        if scope is not None:
            self.scope = scope
        if scope_owner is not None:
            self.scope_owner = scope_owner
        if specific_search_items is not None:
            self.specific_search_items = specific_search_items
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if has_error is not None:
            self.has_error = has_error

    @property
    def allow_quick_search(self):
        """Gets the allow_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The allow_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_quick_search

    @allow_quick_search.setter
    def allow_quick_search(self, allow_quick_search):
        """Sets the allow_quick_search of this QuickSearchConfigurationResponse.


        :param allow_quick_search: The allow_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._allow_quick_search = allow_quick_search

    @property
    def allow_specific_search(self):
        """Gets the allow_specific_search of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The allow_specific_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_specific_search

    @allow_specific_search.setter
    def allow_specific_search(self, allow_specific_search):
        """Sets the allow_specific_search of this QuickSearchConfigurationResponse.


        :param allow_specific_search: The allow_specific_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._allow_specific_search = allow_specific_search

    @property
    def default_to_quick_search(self):
        """Gets the default_to_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The default_to_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._default_to_quick_search

    @default_to_quick_search.setter
    def default_to_quick_search(self, default_to_quick_search):
        """Sets the default_to_quick_search of this QuickSearchConfigurationResponse.


        :param default_to_quick_search: The default_to_quick_search of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._default_to_quick_search = default_to_quick_search

    @property
    def display_name(self):
        """Gets the display_name of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The display_name of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this QuickSearchConfigurationResponse.


        :param display_name: The display_name of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def gallery_image(self):
        """Gets the gallery_image of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The gallery_image of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._gallery_image

    @gallery_image.setter
    def gallery_image(self, gallery_image):
        """Sets the gallery_image of this QuickSearchConfigurationResponse.


        :param gallery_image: The gallery_image of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._gallery_image = gallery_image

    @property
    def history(self):
        """Gets the history of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The history of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this QuickSearchConfigurationResponse.


        :param history: The history of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: list[str]
        """

        self._history = history

    @property
    def include_available_in_specific(self):
        """Gets the include_available_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The include_available_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._include_available_in_specific

    @include_available_in_specific.setter
    def include_available_in_specific(self, include_available_in_specific):
        """Sets the include_available_in_specific of this QuickSearchConfigurationResponse.


        :param include_available_in_specific: The include_available_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._include_available_in_specific = include_available_in_specific

    @property
    def include_quick_search_in_specific(self):
        """Gets the include_quick_search_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The include_quick_search_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._include_quick_search_in_specific

    @include_quick_search_in_specific.setter
    def include_quick_search_in_specific(self, include_quick_search_in_specific):
        """Sets the include_quick_search_in_specific of this QuickSearchConfigurationResponse.


        :param include_quick_search_in_specific: The include_quick_search_in_specific of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._include_quick_search_in_specific = include_quick_search_in_specific

    @property
    def quick_search_id(self):
        """Gets the quick_search_id of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The quick_search_id of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._quick_search_id

    @quick_search_id.setter
    def quick_search_id(self, quick_search_id):
        """Sets the quick_search_id of this QuickSearchConfigurationResponse.


        :param quick_search_id: The quick_search_id of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._quick_search_id = quick_search_id

    @property
    def quick_search_items(self):
        """Gets the quick_search_items of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The quick_search_items of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: list[QuickSearchItem]
        """
        return self._quick_search_items

    @quick_search_items.setter
    def quick_search_items(self, quick_search_items):
        """Sets the quick_search_items of this QuickSearchConfigurationResponse.


        :param quick_search_items: The quick_search_items of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: list[QuickSearchItem]
        """

        self._quick_search_items = quick_search_items

    @property
    def quick_search_watermark(self):
        """Gets the quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._quick_search_watermark

    @quick_search_watermark.setter
    def quick_search_watermark(self, quick_search_watermark):
        """Sets the quick_search_watermark of this QuickSearchConfigurationResponse.


        :param quick_search_watermark: The quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._quick_search_watermark = quick_search_watermark

    @property
    def resolved_quick_search_watermark(self):
        """Gets the resolved_quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The resolved_quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._resolved_quick_search_watermark

    @resolved_quick_search_watermark.setter
    def resolved_quick_search_watermark(self, resolved_quick_search_watermark):
        """Sets the resolved_quick_search_watermark of this QuickSearchConfigurationResponse.


        :param resolved_quick_search_watermark: The resolved_quick_search_watermark of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._resolved_quick_search_watermark = resolved_quick_search_watermark

    @property
    def scope(self):
        """Gets the scope of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The scope of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this QuickSearchConfigurationResponse.


        :param scope: The scope of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def scope_owner(self):
        """Gets the scope_owner of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The scope_owner of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._scope_owner

    @scope_owner.setter
    def scope_owner(self, scope_owner):
        """Sets the scope_owner of this QuickSearchConfigurationResponse.


        :param scope_owner: The scope_owner of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._scope_owner = scope_owner

    @property
    def specific_search_items(self):
        """Gets the specific_search_items of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The specific_search_items of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: list[QuickSearchItem]
        """
        return self._specific_search_items

    @specific_search_items.setter
    def specific_search_items(self, specific_search_items):
        """Sets the specific_search_items of this QuickSearchConfigurationResponse.


        :param specific_search_items: The specific_search_items of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: list[QuickSearchItem]
        """

        self._specific_search_items = specific_search_items

    @property
    def error_code(self):
        """Gets the error_code of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The error_code of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this QuickSearchConfigurationResponse.


        :param error_code: The error_code of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The error_message of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this QuickSearchConfigurationResponse.


        :param error_message: The error_message of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def has_error(self):
        """Gets the has_error of this QuickSearchConfigurationResponse.  # noqa: E501


        :return: The has_error of this QuickSearchConfigurationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this QuickSearchConfigurationResponse.


        :param has_error: The has_error of this QuickSearchConfigurationResponse.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickSearchConfigurationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuickSearchConfigurationResponse):
            return True

        return self.to_dict() != other.to_dict()
