# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class Role(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'browser_client_custom_view_id': 'str',
        'business_object_exclude_list': 'list[str]',
        'culture': 'str',
        'description': 'str',
        'mobile_client_custom_view_id': 'str',
        'primary_bus_ob_id': 'str',
        'role_id': 'str',
        'role_name': 'str',
        'smart_client_custom_view_id': 'str'
    }

    attribute_map = {
        'browser_client_custom_view_id': 'browserClientCustomViewId',
        'business_object_exclude_list': 'businessObjectExcludeList',
        'culture': 'culture',
        'description': 'description',
        'mobile_client_custom_view_id': 'mobileClientCustomViewId',
        'primary_bus_ob_id': 'primaryBusObId',
        'role_id': 'roleId',
        'role_name': 'roleName',
        'smart_client_custom_view_id': 'smartClientCustomViewId'
    }

    def __init__(self, browser_client_custom_view_id=None, business_object_exclude_list=None, culture=None, description=None, mobile_client_custom_view_id=None, primary_bus_ob_id=None, role_id=None, role_name=None, smart_client_custom_view_id=None, local_vars_configuration=None):  # noqa: E501
        """Role - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._browser_client_custom_view_id = None
        self._business_object_exclude_list = None
        self._culture = None
        self._description = None
        self._mobile_client_custom_view_id = None
        self._primary_bus_ob_id = None
        self._role_id = None
        self._role_name = None
        self._smart_client_custom_view_id = None
        self.discriminator = None

        if browser_client_custom_view_id is not None:
            self.browser_client_custom_view_id = browser_client_custom_view_id
        if business_object_exclude_list is not None:
            self.business_object_exclude_list = business_object_exclude_list
        if culture is not None:
            self.culture = culture
        if description is not None:
            self.description = description
        if mobile_client_custom_view_id is not None:
            self.mobile_client_custom_view_id = mobile_client_custom_view_id
        if primary_bus_ob_id is not None:
            self.primary_bus_ob_id = primary_bus_ob_id
        if role_id is not None:
            self.role_id = role_id
        if role_name is not None:
            self.role_name = role_name
        if smart_client_custom_view_id is not None:
            self.smart_client_custom_view_id = smart_client_custom_view_id

    @property
    def browser_client_custom_view_id(self):
        """Gets the browser_client_custom_view_id of this Role.  # noqa: E501


        :return: The browser_client_custom_view_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._browser_client_custom_view_id

    @browser_client_custom_view_id.setter
    def browser_client_custom_view_id(self, browser_client_custom_view_id):
        """Sets the browser_client_custom_view_id of this Role.


        :param browser_client_custom_view_id: The browser_client_custom_view_id of this Role.  # noqa: E501
        :type: str
        """

        self._browser_client_custom_view_id = browser_client_custom_view_id

    @property
    def business_object_exclude_list(self):
        """Gets the business_object_exclude_list of this Role.  # noqa: E501


        :return: The business_object_exclude_list of this Role.  # noqa: E501
        :rtype: list[str]
        """
        return self._business_object_exclude_list

    @business_object_exclude_list.setter
    def business_object_exclude_list(self, business_object_exclude_list):
        """Sets the business_object_exclude_list of this Role.


        :param business_object_exclude_list: The business_object_exclude_list of this Role.  # noqa: E501
        :type: list[str]
        """

        self._business_object_exclude_list = business_object_exclude_list

    @property
    def culture(self):
        """Gets the culture of this Role.  # noqa: E501


        :return: The culture of this Role.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this Role.


        :param culture: The culture of this Role.  # noqa: E501
        :type: str
        """

        self._culture = culture

    @property
    def description(self):
        """Gets the description of this Role.  # noqa: E501


        :return: The description of this Role.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Role.


        :param description: The description of this Role.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mobile_client_custom_view_id(self):
        """Gets the mobile_client_custom_view_id of this Role.  # noqa: E501


        :return: The mobile_client_custom_view_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._mobile_client_custom_view_id

    @mobile_client_custom_view_id.setter
    def mobile_client_custom_view_id(self, mobile_client_custom_view_id):
        """Sets the mobile_client_custom_view_id of this Role.


        :param mobile_client_custom_view_id: The mobile_client_custom_view_id of this Role.  # noqa: E501
        :type: str
        """

        self._mobile_client_custom_view_id = mobile_client_custom_view_id

    @property
    def primary_bus_ob_id(self):
        """Gets the primary_bus_ob_id of this Role.  # noqa: E501


        :return: The primary_bus_ob_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._primary_bus_ob_id

    @primary_bus_ob_id.setter
    def primary_bus_ob_id(self, primary_bus_ob_id):
        """Sets the primary_bus_ob_id of this Role.


        :param primary_bus_ob_id: The primary_bus_ob_id of this Role.  # noqa: E501
        :type: str
        """

        self._primary_bus_ob_id = primary_bus_ob_id

    @property
    def role_id(self):
        """Gets the role_id of this Role.  # noqa: E501


        :return: The role_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Role.


        :param role_id: The role_id of this Role.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def role_name(self):
        """Gets the role_name of this Role.  # noqa: E501


        :return: The role_name of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this Role.


        :param role_name: The role_name of this Role.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def smart_client_custom_view_id(self):
        """Gets the smart_client_custom_view_id of this Role.  # noqa: E501


        :return: The smart_client_custom_view_id of this Role.  # noqa: E501
        :rtype: str
        """
        return self._smart_client_custom_view_id

    @smart_client_custom_view_id.setter
    def smart_client_custom_view_id(self, smart_client_custom_view_id):
        """Sets the smart_client_custom_view_id of this Role.


        :param smart_client_custom_view_id: The smart_client_custom_view_id of this Role.  # noqa: E501
        :type: str
        """

        self._smart_client_custom_view_id = smart_client_custom_view_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Role):
            return True

        return self.to_dict() != other.to_dict()
