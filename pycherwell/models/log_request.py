# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class LogRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key_value_properties': 'list[object]',
        'level': 'str',
        'message': 'str'
    }

    attribute_map = {
        'key_value_properties': 'keyValueProperties',
        'level': 'level',
        'message': 'message'
    }

    def __init__(self, key_value_properties=None, level=None, message=None, local_vars_configuration=None):  # noqa: E501
        """LogRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key_value_properties = None
        self._level = None
        self._message = None
        self.discriminator = None

        if key_value_properties is not None:
            self.key_value_properties = key_value_properties
        if level is not None:
            self.level = level
        if message is not None:
            self.message = message

    @property
    def key_value_properties(self):
        """Gets the key_value_properties of this LogRequest.  # noqa: E501


        :return: The key_value_properties of this LogRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._key_value_properties

    @key_value_properties.setter
    def key_value_properties(self, key_value_properties):
        """Sets the key_value_properties of this LogRequest.


        :param key_value_properties: The key_value_properties of this LogRequest.  # noqa: E501
        :type: list[object]
        """

        self._key_value_properties = key_value_properties

    @property
    def level(self):
        """Gets the level of this LogRequest.  # noqa: E501


        :return: The level of this LogRequest.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LogRequest.


        :param level: The level of this LogRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Fatal", "Error", "Warning", "Info", "Stats", "Debug"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and level not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """Gets the message of this LogRequest.  # noqa: E501


        :return: The message of this LogRequest.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogRequest.


        :param message: The message of this LogRequest.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogRequest):
            return True

        return self.to_dict() != other.to_dict()
