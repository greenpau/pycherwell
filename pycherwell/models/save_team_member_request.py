# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class SaveTeamMemberRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_team_manager': 'bool',
        'set_as_default_team': 'bool',
        'team_id': 'str',
        'user_rec_id': 'str'
    }

    attribute_map = {
        'is_team_manager': 'isTeamManager',
        'set_as_default_team': 'setAsDefaultTeam',
        'team_id': 'teamId',
        'user_rec_id': 'userRecId'
    }

    def __init__(self, is_team_manager=None, set_as_default_team=None, team_id=None, user_rec_id=None, local_vars_configuration=None):  # noqa: E501
        """SaveTeamMemberRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_team_manager = None
        self._set_as_default_team = None
        self._team_id = None
        self._user_rec_id = None
        self.discriminator = None

        if is_team_manager is not None:
            self.is_team_manager = is_team_manager
        if set_as_default_team is not None:
            self.set_as_default_team = set_as_default_team
        if team_id is not None:
            self.team_id = team_id
        if user_rec_id is not None:
            self.user_rec_id = user_rec_id

    @property
    def is_team_manager(self):
        """Gets the is_team_manager of this SaveTeamMemberRequest.  # noqa: E501


        :return: The is_team_manager of this SaveTeamMemberRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_team_manager

    @is_team_manager.setter
    def is_team_manager(self, is_team_manager):
        """Sets the is_team_manager of this SaveTeamMemberRequest.


        :param is_team_manager: The is_team_manager of this SaveTeamMemberRequest.  # noqa: E501
        :type: bool
        """

        self._is_team_manager = is_team_manager

    @property
    def set_as_default_team(self):
        """Gets the set_as_default_team of this SaveTeamMemberRequest.  # noqa: E501


        :return: The set_as_default_team of this SaveTeamMemberRequest.  # noqa: E501
        :rtype: bool
        """
        return self._set_as_default_team

    @set_as_default_team.setter
    def set_as_default_team(self, set_as_default_team):
        """Sets the set_as_default_team of this SaveTeamMemberRequest.


        :param set_as_default_team: The set_as_default_team of this SaveTeamMemberRequest.  # noqa: E501
        :type: bool
        """

        self._set_as_default_team = set_as_default_team

    @property
    def team_id(self):
        """Gets the team_id of this SaveTeamMemberRequest.  # noqa: E501


        :return: The team_id of this SaveTeamMemberRequest.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this SaveTeamMemberRequest.


        :param team_id: The team_id of this SaveTeamMemberRequest.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_rec_id(self):
        """Gets the user_rec_id of this SaveTeamMemberRequest.  # noqa: E501


        :return: The user_rec_id of this SaveTeamMemberRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_rec_id

    @user_rec_id.setter
    def user_rec_id(self, user_rec_id):
        """Sets the user_rec_id of this SaveTeamMemberRequest.


        :param user_rec_id: The user_rec_id of this SaveTeamMemberRequest.  # noqa: E501
        :type: str
        """

        self._user_rec_id = user_rec_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTeamMemberRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SaveTeamMemberRequest):
            return True

        return self.to_dict() != other.to_dict()
