# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class SimpleResultsListGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_bus_ob_target': 'bool',
        'simple_results_list_items': 'list[SimpleResultsListItem]',
        'sub_title': 'str',
        'target_id': 'str',
        'title': 'str',
        'error_code': 'str',
        'error_message': 'str',
        'has_error': 'bool'
    }

    attribute_map = {
        'is_bus_ob_target': 'isBusObTarget',
        'simple_results_list_items': 'simpleResultsListItems',
        'sub_title': 'subTitle',
        'target_id': 'targetId',
        'title': 'title',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'has_error': 'hasError'
    }

    def __init__(self, is_bus_ob_target=None, simple_results_list_items=None, sub_title=None, target_id=None, title=None, error_code=None, error_message=None, has_error=None, local_vars_configuration=None):  # noqa: E501
        """SimpleResultsListGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_bus_ob_target = None
        self._simple_results_list_items = None
        self._sub_title = None
        self._target_id = None
        self._title = None
        self._error_code = None
        self._error_message = None
        self._has_error = None
        self.discriminator = None

        if is_bus_ob_target is not None:
            self.is_bus_ob_target = is_bus_ob_target
        if simple_results_list_items is not None:
            self.simple_results_list_items = simple_results_list_items
        if sub_title is not None:
            self.sub_title = sub_title
        if target_id is not None:
            self.target_id = target_id
        if title is not None:
            self.title = title
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if has_error is not None:
            self.has_error = has_error

    @property
    def is_bus_ob_target(self):
        """Gets the is_bus_ob_target of this SimpleResultsListGroup.  # noqa: E501


        :return: The is_bus_ob_target of this SimpleResultsListGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_bus_ob_target

    @is_bus_ob_target.setter
    def is_bus_ob_target(self, is_bus_ob_target):
        """Sets the is_bus_ob_target of this SimpleResultsListGroup.


        :param is_bus_ob_target: The is_bus_ob_target of this SimpleResultsListGroup.  # noqa: E501
        :type: bool
        """

        self._is_bus_ob_target = is_bus_ob_target

    @property
    def simple_results_list_items(self):
        """Gets the simple_results_list_items of this SimpleResultsListGroup.  # noqa: E501


        :return: The simple_results_list_items of this SimpleResultsListGroup.  # noqa: E501
        :rtype: list[SimpleResultsListItem]
        """
        return self._simple_results_list_items

    @simple_results_list_items.setter
    def simple_results_list_items(self, simple_results_list_items):
        """Sets the simple_results_list_items of this SimpleResultsListGroup.


        :param simple_results_list_items: The simple_results_list_items of this SimpleResultsListGroup.  # noqa: E501
        :type: list[SimpleResultsListItem]
        """

        self._simple_results_list_items = simple_results_list_items

    @property
    def sub_title(self):
        """Gets the sub_title of this SimpleResultsListGroup.  # noqa: E501


        :return: The sub_title of this SimpleResultsListGroup.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this SimpleResultsListGroup.


        :param sub_title: The sub_title of this SimpleResultsListGroup.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def target_id(self):
        """Gets the target_id of this SimpleResultsListGroup.  # noqa: E501


        :return: The target_id of this SimpleResultsListGroup.  # noqa: E501
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this SimpleResultsListGroup.


        :param target_id: The target_id of this SimpleResultsListGroup.  # noqa: E501
        :type: str
        """

        self._target_id = target_id

    @property
    def title(self):
        """Gets the title of this SimpleResultsListGroup.  # noqa: E501


        :return: The title of this SimpleResultsListGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SimpleResultsListGroup.


        :param title: The title of this SimpleResultsListGroup.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def error_code(self):
        """Gets the error_code of this SimpleResultsListGroup.  # noqa: E501


        :return: The error_code of this SimpleResultsListGroup.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this SimpleResultsListGroup.


        :param error_code: The error_code of this SimpleResultsListGroup.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this SimpleResultsListGroup.  # noqa: E501


        :return: The error_message of this SimpleResultsListGroup.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SimpleResultsListGroup.


        :param error_message: The error_message of this SimpleResultsListGroup.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def has_error(self):
        """Gets the has_error of this SimpleResultsListGroup.  # noqa: E501


        :return: The has_error of this SimpleResultsListGroup.  # noqa: E501
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this SimpleResultsListGroup.


        :param has_error: The has_error of this SimpleResultsListGroup.  # noqa: E501
        :type: bool
        """

        self._has_error = has_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleResultsListGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleResultsListGroup):
            return True

        return self.to_dict() != other.to_dict()
