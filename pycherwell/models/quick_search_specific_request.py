# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pycherwell.configuration import Configuration


class QuickSearchSpecificRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ascending': 'bool',
        'non_final_state': 'bool',
        'search_any_words': 'bool',
        'search_attachments': 'bool',
        'search_related': 'bool',
        'search_text': 'str',
        'selected_changed_limit': 'ChangedLimit',
        'selected_sort_by_field_id': 'str',
        'use_sort_by': 'bool',
        'specific_search_target_id': 'str',
        'is_bus_ob_target': 'bool'
    }

    attribute_map = {
        'ascending': 'ascending',
        'non_final_state': 'nonFinalState',
        'search_any_words': 'searchAnyWords',
        'search_attachments': 'searchAttachments',
        'search_related': 'searchRelated',
        'search_text': 'searchText',
        'selected_changed_limit': 'selectedChangedLimit',
        'selected_sort_by_field_id': 'selectedSortByFieldId',
        'use_sort_by': 'useSortBy',
        'specific_search_target_id': 'specificSearchTargetId',
        'is_bus_ob_target': 'isBusObTarget'
    }

    def __init__(self, ascending=None, non_final_state=None, search_any_words=None, search_attachments=None, search_related=None, search_text=None, selected_changed_limit=None, selected_sort_by_field_id=None, use_sort_by=None, specific_search_target_id=None, is_bus_ob_target=None, local_vars_configuration=None):  # noqa: E501
        """QuickSearchSpecificRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ascending = None
        self._non_final_state = None
        self._search_any_words = None
        self._search_attachments = None
        self._search_related = None
        self._search_text = None
        self._selected_changed_limit = None
        self._selected_sort_by_field_id = None
        self._use_sort_by = None
        self._specific_search_target_id = None
        self._is_bus_ob_target = None
        self.discriminator = None

        if ascending is not None:
            self.ascending = ascending
        if non_final_state is not None:
            self.non_final_state = non_final_state
        if search_any_words is not None:
            self.search_any_words = search_any_words
        if search_attachments is not None:
            self.search_attachments = search_attachments
        if search_related is not None:
            self.search_related = search_related
        if search_text is not None:
            self.search_text = search_text
        if selected_changed_limit is not None:
            self.selected_changed_limit = selected_changed_limit
        if selected_sort_by_field_id is not None:
            self.selected_sort_by_field_id = selected_sort_by_field_id
        if use_sort_by is not None:
            self.use_sort_by = use_sort_by
        if specific_search_target_id is not None:
            self.specific_search_target_id = specific_search_target_id
        if is_bus_ob_target is not None:
            self.is_bus_ob_target = is_bus_ob_target

    @property
    def ascending(self):
        """Gets the ascending of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The ascending of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ascending

    @ascending.setter
    def ascending(self, ascending):
        """Sets the ascending of this QuickSearchSpecificRequest.


        :param ascending: The ascending of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._ascending = ascending

    @property
    def non_final_state(self):
        """Gets the non_final_state of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The non_final_state of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._non_final_state

    @non_final_state.setter
    def non_final_state(self, non_final_state):
        """Sets the non_final_state of this QuickSearchSpecificRequest.


        :param non_final_state: The non_final_state of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._non_final_state = non_final_state

    @property
    def search_any_words(self):
        """Gets the search_any_words of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The search_any_words of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._search_any_words

    @search_any_words.setter
    def search_any_words(self, search_any_words):
        """Sets the search_any_words of this QuickSearchSpecificRequest.


        :param search_any_words: The search_any_words of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._search_any_words = search_any_words

    @property
    def search_attachments(self):
        """Gets the search_attachments of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The search_attachments of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._search_attachments

    @search_attachments.setter
    def search_attachments(self, search_attachments):
        """Sets the search_attachments of this QuickSearchSpecificRequest.


        :param search_attachments: The search_attachments of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._search_attachments = search_attachments

    @property
    def search_related(self):
        """Gets the search_related of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The search_related of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._search_related

    @search_related.setter
    def search_related(self, search_related):
        """Sets the search_related of this QuickSearchSpecificRequest.


        :param search_related: The search_related of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._search_related = search_related

    @property
    def search_text(self):
        """Gets the search_text of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The search_text of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: str
        """
        return self._search_text

    @search_text.setter
    def search_text(self, search_text):
        """Sets the search_text of this QuickSearchSpecificRequest.


        :param search_text: The search_text of this QuickSearchSpecificRequest.  # noqa: E501
        :type: str
        """

        self._search_text = search_text

    @property
    def selected_changed_limit(self):
        """Gets the selected_changed_limit of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The selected_changed_limit of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: ChangedLimit
        """
        return self._selected_changed_limit

    @selected_changed_limit.setter
    def selected_changed_limit(self, selected_changed_limit):
        """Sets the selected_changed_limit of this QuickSearchSpecificRequest.


        :param selected_changed_limit: The selected_changed_limit of this QuickSearchSpecificRequest.  # noqa: E501
        :type: ChangedLimit
        """

        self._selected_changed_limit = selected_changed_limit

    @property
    def selected_sort_by_field_id(self):
        """Gets the selected_sort_by_field_id of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The selected_sort_by_field_id of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: str
        """
        return self._selected_sort_by_field_id

    @selected_sort_by_field_id.setter
    def selected_sort_by_field_id(self, selected_sort_by_field_id):
        """Sets the selected_sort_by_field_id of this QuickSearchSpecificRequest.


        :param selected_sort_by_field_id: The selected_sort_by_field_id of this QuickSearchSpecificRequest.  # noqa: E501
        :type: str
        """

        self._selected_sort_by_field_id = selected_sort_by_field_id

    @property
    def use_sort_by(self):
        """Gets the use_sort_by of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The use_sort_by of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_sort_by

    @use_sort_by.setter
    def use_sort_by(self, use_sort_by):
        """Sets the use_sort_by of this QuickSearchSpecificRequest.


        :param use_sort_by: The use_sort_by of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._use_sort_by = use_sort_by

    @property
    def specific_search_target_id(self):
        """Gets the specific_search_target_id of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The specific_search_target_id of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: str
        """
        return self._specific_search_target_id

    @specific_search_target_id.setter
    def specific_search_target_id(self, specific_search_target_id):
        """Sets the specific_search_target_id of this QuickSearchSpecificRequest.


        :param specific_search_target_id: The specific_search_target_id of this QuickSearchSpecificRequest.  # noqa: E501
        :type: str
        """

        self._specific_search_target_id = specific_search_target_id

    @property
    def is_bus_ob_target(self):
        """Gets the is_bus_ob_target of this QuickSearchSpecificRequest.  # noqa: E501


        :return: The is_bus_ob_target of this QuickSearchSpecificRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_bus_ob_target

    @is_bus_ob_target.setter
    def is_bus_ob_target(self, is_bus_ob_target):
        """Sets the is_bus_ob_target of this QuickSearchSpecificRequest.


        :param is_bus_ob_target: The is_bus_ob_target of this QuickSearchSpecificRequest.  # noqa: E501
        :type: bool
        """

        self._is_bus_ob_target = is_bus_ob_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuickSearchSpecificRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuickSearchSpecificRequest):
            return True

        return self.to_dict() != other.to_dict()
