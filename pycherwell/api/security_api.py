# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pycherwell.api_client import ApiClient
from pycherwell.exceptions import (
    ApiTypeError,
    ApiValueError
)


class SecurityApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def security_get_client_security_settings_v1(self, applicationtype, **kwargs):  # noqa: E501
        """Get client security settings  # noqa: E501

        Operation to get the configured client security settings. Returns true if internal, Windows, LDAP, or SAML are enabled as authentication methods.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_client_security_settings_v1(applicationtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str applicationtype: The type of CSM application to return security settings for.  Application type is Desktop Client, Browser Client, Browser Portal or Cherwell Mobile. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ClientSecuritySettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_client_security_settings_v1_with_http_info(applicationtype, **kwargs)  # noqa: E501

    def security_get_client_security_settings_v1_with_http_info(self, applicationtype, **kwargs):  # noqa: E501
        """Get client security settings  # noqa: E501

        Operation to get the configured client security settings. Returns true if internal, Windows, LDAP, or SAML are enabled as authentication methods.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_client_security_settings_v1_with_http_info(applicationtype, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str applicationtype: The type of CSM application to return security settings for.  Application type is Desktop Client, Browser Client, Browser Portal or Cherwell Mobile. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ClientSecuritySettingsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['applicationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_client_security_settings_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'applicationtype' is set
        if self.api_client.client_side_validation and ('applicationtype' not in local_var_params or  # noqa: E501
                                                        local_var_params['applicationtype'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `applicationtype` when calling `security_get_client_security_settings_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'applicationtype' in local_var_params:
            path_params['applicationtype'] = local_var_params['applicationtype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getclientsecuritysettings/applicationtype/{applicationtype}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientSecuritySettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_roles_v1(self, **kwargs):  # noqa: E501
        """Get all available Roles  # noqa: E501

        Operation to get all available Roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_roles_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RoleReadResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_roles_v1_with_http_info(**kwargs)  # noqa: E501

    def security_get_roles_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all available Roles  # noqa: E501

        Operation to get all available Roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_roles_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RoleReadResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_roles_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleReadResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_roles_v2(self, **kwargs):  # noqa: E501
        """Get all available Roles  # noqa: E501

        Operation to get all available Roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_roles_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RoleReadV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_roles_v2_with_http_info(**kwargs)  # noqa: E501

    def security_get_roles_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get all available Roles  # noqa: E501

        Operation to get all available Roles.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_roles_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RoleReadV2Response, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_roles_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getroles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleReadV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_by_bus_ob_id_v1(self, groupid, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_id_v1(groupid, bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID.  (required)
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BusinessObjectPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_by_bus_ob_id_v1_with_http_info(groupid, bus_ob_id, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_by_bus_ob_id_v1_with_http_info(self, groupid, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_id_v1_with_http_info(groupid, bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID.  (required)
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BusinessObjectPermission], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid', 'bus_ob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_by_bus_ob_id_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_security_group_business_object_permissions_by_bus_ob_id_v1`")  # noqa: E501
        # verify the required parameter 'bus_ob_id' is set
        if self.api_client.client_side_validation and ('bus_ob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bus_ob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bus_ob_id` when calling `security_get_security_group_business_object_permissions_by_bus_ob_id_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501
        if 'bus_ob_id' in local_var_params:
            path_params['busObId'] = local_var_params['bus_ob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BusinessObjectPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_by_bus_ob_id_v2(self, groupid, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_id_v2(groupid, bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID.  (required)
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GetSecurityGroupBusinessObjectPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_by_bus_ob_id_v2_with_http_info(groupid, bus_ob_id, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_by_bus_ob_id_v2_with_http_info(self, groupid, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_id_v2_with_http_info(groupid, bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID.  (required)
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GetSecurityGroupBusinessObjectPermissionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid', 'bus_ob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_by_bus_ob_id_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_security_group_business_object_permissions_by_bus_ob_id_v2`")  # noqa: E501
        # verify the required parameter 'bus_ob_id' is set
        if self.api_client.client_side_validation and ('bus_ob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bus_ob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bus_ob_id` when calling `security_get_security_group_business_object_permissions_by_bus_ob_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501
        if 'bus_ob_id' in local_var_params:
            path_params['busObId'] = local_var_params['bus_ob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSecurityGroupBusinessObjectPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_by_bus_ob_name_v1(self, groupname, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_name_v1(groupname, busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name.  (required)
        :param str busobname: Specify the Business Object name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BusinessObjectPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_by_bus_ob_name_v1_with_http_info(groupname, busobname, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_by_bus_ob_name_v1_with_http_info(self, groupname, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_name_v1_with_http_info(groupname, busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name.  (required)
        :param str busobname: Specify the Business Object name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BusinessObjectPermission], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupname', 'busobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_by_bus_ob_name_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupname' is set
        if self.api_client.client_side_validation and ('groupname' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupname` when calling `security_get_security_group_business_object_permissions_by_bus_ob_name_v1`")  # noqa: E501
        # verify the required parameter 'busobname' is set
        if self.api_client.client_side_validation and ('busobname' not in local_var_params or  # noqa: E501
                                                        local_var_params['busobname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `busobname` when calling `security_get_security_group_business_object_permissions_by_bus_ob_name_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupname' in local_var_params:
            path_params['groupname'] = local_var_params['groupname']  # noqa: E501
        if 'busobname' in local_var_params:
            path_params['busobname'] = local_var_params['busobname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BusinessObjectPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_by_bus_ob_name_v2(self, groupname, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_name_v2(groupname, busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name.  (required)
        :param str busobname: Specify the Business Object name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GetSecurityGroupBusinessObjectPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_by_bus_ob_name_v2_with_http_info(groupname, busobname, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_by_bus_ob_name_v2_with_http_info(self, groupname, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions by Security Group  # noqa: E501

        Operation to get specific Business Object permissions for a Security Group.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_by_bus_ob_name_v2_with_http_info(groupname, busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name.  (required)
        :param str busobname: Specify the Business Object name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GetSecurityGroupBusinessObjectPermissionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupname', 'busobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_by_bus_ob_name_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupname' is set
        if self.api_client.client_side_validation and ('groupname' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupname` when calling `security_get_security_group_business_object_permissions_by_bus_ob_name_v2`")  # noqa: E501
        # verify the required parameter 'busobname' is set
        if self.api_client.client_side_validation and ('busobname' not in local_var_params or  # noqa: E501
                                                        local_var_params['busobname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `busobname` when calling `security_get_security_group_business_object_permissions_by_bus_ob_name_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupname' in local_var_params:
            path_params['groupname'] = local_var_params['groupname']  # noqa: E501
        if 'busobname' in local_var_params:
            path_params['busobname'] = local_var_params['busobname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSecurityGroupBusinessObjectPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1(self, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permission for current user  # noqa: E501

        Operation to get Business Object permissions for the currently logged-in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1(bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BusinessObjectPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1_with_http_info(bus_ob_id, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1_with_http_info(self, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permission for current user  # noqa: E501

        Operation to get Business Object permissions for the currently logged-in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1_with_http_info(bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BusinessObjectPermission], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bus_ob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bus_ob_id' is set
        if self.api_client.client_side_validation and ('bus_ob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bus_ob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bus_ob_id` when calling `security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bus_ob_id' in local_var_params:
            path_params['busObId'] = local_var_params['bus_ob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BusinessObjectPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2(self, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permission for current user  # noqa: E501

        Operation to get Business Object permissions for the currently logged-in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2(bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GetSecurityGroupBusinessObjectPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2_with_http_info(bus_ob_id, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2_with_http_info(self, bus_ob_id, **kwargs):  # noqa: E501
        """Get Business Object permission for current user  # noqa: E501

        Operation to get Business Object permissions for the currently logged-in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2_with_http_info(bus_ob_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str bus_ob_id: Specify the Business Object ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GetSecurityGroupBusinessObjectPermissionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['bus_ob_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bus_ob_id' is set
        if self.api_client.client_side_validation and ('bus_ob_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bus_ob_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bus_ob_id` when calling `security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bus_ob_id' in local_var_params:
            path_params['busObId'] = local_var_params['bus_ob_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSecurityGroupBusinessObjectPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1(self, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions for current user  # noqa: E501

        Operation to get Business Object permissions for currently logged in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1(busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str busobname: Specify the Business Object name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[BusinessObjectPermission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1_with_http_info(busobname, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1_with_http_info(self, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions for current user  # noqa: E501

        Operation to get Business Object permissions for currently logged in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1_with_http_info(busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str busobname: Specify the Business Object name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[BusinessObjectPermission], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['busobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'busobname' is set
        if self.api_client.client_side_validation and ('busobname' not in local_var_params or  # noqa: E501
                                                        local_var_params['busobname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `busobname` when calling `security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'busobname' in local_var_params:
            path_params['busobname'] = local_var_params['busobname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BusinessObjectPermission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2(self, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions for current user  # noqa: E501

        Operation to get Business Object permissions for currently logged in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2(busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str busobname: Specify the Business Object name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: GetSecurityGroupBusinessObjectPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2_with_http_info(busobname, **kwargs)  # noqa: E501

    def security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2_with_http_info(self, busobname, **kwargs):  # noqa: E501
        """Get Business Object permissions for current user  # noqa: E501

        Operation to get Business Object permissions for currently logged in user's Security Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2_with_http_info(busobname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str busobname: Specify the Business Object name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(GetSecurityGroupBusinessObjectPermissionsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['busobname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'busobname' is set
        if self.api_client.client_side_validation and ('busobname' not in local_var_params or  # noqa: E501
                                                        local_var_params['busobname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `busobname` when calling `security_get_security_group_business_object_permissions_for_current_user_by_bus_ob_name_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'busobname' in local_var_params:
            path_params['busobname'] = local_var_params['busobname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetSecurityGroupBusinessObjectPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_categories_v1(self, **kwargs):  # noqa: E501
        """Get all Security Group categories  # noqa: E501

        Operation to get IDs and names for all available Security Group categories.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_categories_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[RightCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_categories_v1_with_http_info(**kwargs)  # noqa: E501

    def security_get_security_group_categories_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Security Group categories  # noqa: E501

        Operation to get IDs and names for all available Security Group categories.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_categories_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[RightCategory], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_categories_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroupcategories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RightCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_categories_v2(self, **kwargs):  # noqa: E501
        """Get all Security Group categories  # noqa: E501

        Operation to get IDs and names for all available Security Group categories.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_categories_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityRightCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_categories_v2_with_http_info(**kwargs)  # noqa: E501

    def security_get_security_group_categories_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Security Group categories  # noqa: E501

        Operation to get IDs and names for all available Security Group categories.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_categories_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityRightCategoriesResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_categories_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroupcategories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityRightCategoriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_by_group_id_and_category_id_v1(self, groupid, categoryid, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category. To get Security Group IDs, use \"Get all available Security Groups.\" To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_id_and_category_id_v1(groupid, categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID (required)
        :param str categoryid: Specify the Security Group category ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Right]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_by_group_id_and_category_id_v1_with_http_info(groupid, categoryid, **kwargs)  # noqa: E501

    def security_get_security_group_rights_by_group_id_and_category_id_v1_with_http_info(self, groupid, categoryid, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category. To get Security Group IDs, use \"Get all available Security Groups.\" To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_id_and_category_id_v1_with_http_info(groupid, categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID (required)
        :param str categoryid: Specify the Security Group category ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Right], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid', 'categoryid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_by_group_id_and_category_id_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_security_group_rights_by_group_id_and_category_id_v1`")  # noqa: E501
        # verify the required parameter 'categoryid' is set
        if self.api_client.client_side_validation and ('categoryid' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryid` when calling `security_get_security_group_rights_by_group_id_and_category_id_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501
        if 'categoryid' in local_var_params:
            path_params['categoryid'] = local_var_params['categoryid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Right]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_by_group_id_and_category_id_v2(self, groupid, categoryid, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category. To get Security Group IDs, use \"Get all available Security Groups.\" To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_id_and_category_id_v2(groupid, categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID (required)
        :param str categoryid: Specify the Security Group category ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityRightsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_by_group_id_and_category_id_v2_with_http_info(groupid, categoryid, **kwargs)  # noqa: E501

    def security_get_security_group_rights_by_group_id_and_category_id_v2_with_http_info(self, groupid, categoryid, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category. To get Security Group IDs, use \"Get all available Security Groups.\" To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_id_and_category_id_v2_with_http_info(groupid, categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID (required)
        :param str categoryid: Specify the Security Group category ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityRightsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid', 'categoryid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_by_group_id_and_category_id_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_security_group_rights_by_group_id_and_category_id_v2`")  # noqa: E501
        # verify the required parameter 'categoryid' is set
        if self.api_client.client_side_validation and ('categoryid' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryid` when calling `security_get_security_group_rights_by_group_id_and_category_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501
        if 'categoryid' in local_var_params:
            path_params['categoryid'] = local_var_params['categoryid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityRightsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_by_group_name_and_category_name_v1(self, groupname, categoryname, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_name_and_category_name_v1(groupname, categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name. (required)
        :param str categoryname: Specify the Security Group category name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Right]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_by_group_name_and_category_name_v1_with_http_info(groupname, categoryname, **kwargs)  # noqa: E501

    def security_get_security_group_rights_by_group_name_and_category_name_v1_with_http_info(self, groupname, categoryname, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_name_and_category_name_v1_with_http_info(groupname, categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name. (required)
        :param str categoryname: Specify the Security Group category name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Right], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupname', 'categoryname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_by_group_name_and_category_name_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupname' is set
        if self.api_client.client_side_validation and ('groupname' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupname` when calling `security_get_security_group_rights_by_group_name_and_category_name_v1`")  # noqa: E501
        # verify the required parameter 'categoryname' is set
        if self.api_client.client_side_validation and ('categoryname' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryname` when calling `security_get_security_group_rights_by_group_name_and_category_name_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupname' in local_var_params:
            path_params['groupname'] = local_var_params['groupname']  # noqa: E501
        if 'categoryname' in local_var_params:
            path_params['categoryname'] = local_var_params['categoryname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Right]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_by_group_name_and_category_name_v2(self, groupname, categoryname, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_name_and_category_name_v2(groupname, categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name. (required)
        :param str categoryname: Specify the Security Group category name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityRightsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_by_group_name_and_category_name_v2_with_http_info(groupname, categoryname, **kwargs)  # noqa: E501

    def security_get_security_group_rights_by_group_name_and_category_name_v2_with_http_info(self, groupname, categoryname, **kwargs):  # noqa: E501
        """Get permissions for a Security Group by category  # noqa: E501

        Operation to get permissions for a Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_by_group_name_and_category_name_v2_with_http_info(groupname, categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupname: Specify the Security Group name. (required)
        :param str categoryname: Specify the Security Group category name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityRightsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupname', 'categoryname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_by_group_name_and_category_name_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupname' is set
        if self.api_client.client_side_validation and ('groupname' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupname` when calling `security_get_security_group_rights_by_group_name_and_category_name_v2`")  # noqa: E501
        # verify the required parameter 'categoryname' is set
        if self.api_client.client_side_validation and ('categoryname' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryname` when calling `security_get_security_group_rights_by_group_name_and_category_name_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupname' in local_var_params:
            path_params['groupname'] = local_var_params['groupname']  # noqa: E501
        if 'categoryname' in local_var_params:
            path_params['categoryname'] = local_var_params['categoryname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityRightsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_for_current_user_by_category_id_v1(self, categoryid, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by ID  # noqa: E501

        Operation to get permissions for the current user's Security Group by category. To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_id_v1(categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryid: Specify the Security Group category ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Right]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_for_current_user_by_category_id_v1_with_http_info(categoryid, **kwargs)  # noqa: E501

    def security_get_security_group_rights_for_current_user_by_category_id_v1_with_http_info(self, categoryid, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by ID  # noqa: E501

        Operation to get permissions for the current user's Security Group by category. To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_id_v1_with_http_info(categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryid: Specify the Security Group category ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Right], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['categoryid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_for_current_user_by_category_id_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'categoryid' is set
        if self.api_client.client_side_validation and ('categoryid' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryid` when calling `security_get_security_group_rights_for_current_user_by_category_id_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'categoryid' in local_var_params:
            path_params['categoryid'] = local_var_params['categoryid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Right]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_for_current_user_by_category_id_v2(self, categoryid, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by ID  # noqa: E501

        Operation to get permissions for the current user's Security Group by category. To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_id_v2(categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryid: Specify the Security Group category ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityRightsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_for_current_user_by_category_id_v2_with_http_info(categoryid, **kwargs)  # noqa: E501

    def security_get_security_group_rights_for_current_user_by_category_id_v2_with_http_info(self, categoryid, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by ID  # noqa: E501

        Operation to get permissions for the current user's Security Group by category. To get Security Group category IDs, use \"Get all Security Group categories.\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_id_v2_with_http_info(categoryid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryid: Specify the Security Group category ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityRightsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['categoryid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_for_current_user_by_category_id_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'categoryid' is set
        if self.api_client.client_side_validation and ('categoryid' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryid` when calling `security_get_security_group_rights_for_current_user_by_category_id_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'categoryid' in local_var_params:
            path_params['categoryid'] = local_var_params['categoryid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityRightsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_for_current_user_by_category_name_v1(self, categoryname, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by name  # noqa: E501

        Operation to get permissions for the current user's Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_name_v1(categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryname: Specify the Security Group category name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Right]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_for_current_user_by_category_name_v1_with_http_info(categoryname, **kwargs)  # noqa: E501

    def security_get_security_group_rights_for_current_user_by_category_name_v1_with_http_info(self, categoryname, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by name  # noqa: E501

        Operation to get permissions for the current user's Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_name_v1_with_http_info(categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryname: Specify the Security Group category name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Right], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['categoryname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_for_current_user_by_category_name_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'categoryname' is set
        if self.api_client.client_side_validation and ('categoryname' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryname` when calling `security_get_security_group_rights_for_current_user_by_category_name_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'categoryname' in local_var_params:
            path_params['categoryname'] = local_var_params['categoryname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Right]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_group_rights_for_current_user_by_category_name_v2(self, categoryname, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by name  # noqa: E501

        Operation to get permissions for the current user's Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_name_v2(categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryname: Specify the Security Group category name. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityRightsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_group_rights_for_current_user_by_category_name_v2_with_http_info(categoryname, **kwargs)  # noqa: E501

    def security_get_security_group_rights_for_current_user_by_category_name_v2_with_http_info(self, categoryname, **kwargs):  # noqa: E501
        """Get current user's permissions by Security Group category by name  # noqa: E501

        Operation to get permissions for the current user's Security Group by category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_group_rights_for_current_user_by_category_name_v2_with_http_info(categoryname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str categoryname: Specify the Security Group category name. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityRightsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['categoryname']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_group_rights_for_current_user_by_category_name_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'categoryname' is set
        if self.api_client.client_side_validation and ('categoryname' not in local_var_params or  # noqa: E501
                                                        local_var_params['categoryname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `categoryname` when calling `security_get_security_group_rights_for_current_user_by_category_name_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'categoryname' in local_var_params:
            path_params['categoryname'] = local_var_params['categoryname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityRightsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_groups_v1(self, **kwargs):  # noqa: E501
        """Get all available Security Groups  # noqa: E501

        Operation to get IDs, names, and descriptions for all available Security Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_groups_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_groups_v1_with_http_info(**kwargs)  # noqa: E501

    def security_get_security_groups_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all available Security Groups  # noqa: E501

        Operation to get IDs, names, and descriptions for all available Security Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_groups_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityGroupResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_groups_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getsecuritygroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_security_groups_v2(self, **kwargs):  # noqa: E501
        """Get all available Security Groups  # noqa: E501

        Operation to get IDs, names, and descriptions for all available Security Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_groups_v2(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SecurityGroupV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_security_groups_v2_with_http_info(**kwargs)  # noqa: E501

    def security_get_security_groups_v2_with_http_info(self, **kwargs):  # noqa: E501
        """Get all available Security Groups  # noqa: E501

        Operation to get IDs, names, and descriptions for all available Security Groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_security_groups_v2_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SecurityGroupV2Response, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_security_groups_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getsecuritygroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SecurityGroupV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_users_in_security_group_v1(self, groupid, **kwargs):  # noqa: E501
        """Get users in a Security Group  # noqa: E501

        Operation to get the users in a specified Security Group. Use \"Get all available Security Groups\" to get Security Group record IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_users_in_security_group_v1(groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_users_in_security_group_v1_with_http_info(groupid, **kwargs)  # noqa: E501

    def security_get_users_in_security_group_v1_with_http_info(self, groupid, **kwargs):  # noqa: E501
        """Get users in a Security Group  # noqa: E501

        Operation to get the users in a specified Security Group. Use \"Get all available Security Groups\" to get Security Group record IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_users_in_security_group_v1_with_http_info(groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[User], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_users_in_security_group_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_users_in_security_group_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getusersinsecuritygroup/groupid/{groupid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def security_get_users_in_security_group_v2(self, groupid, **kwargs):  # noqa: E501
        """Get users in a Security Group  # noqa: E501

        Operation to get the users in a specified Security Group. Use \"Get all available Security Groups\" to get Security Group record IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_users_in_security_group_v2(groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: UserReadV2Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.security_get_users_in_security_group_v2_with_http_info(groupid, **kwargs)  # noqa: E501

    def security_get_users_in_security_group_v2_with_http_info(self, groupid, **kwargs):  # noqa: E501
        """Get users in a Security Group  # noqa: E501

        Operation to get the users in a specified Security Group. Use \"Get all available Security Groups\" to get Security Group record IDs.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.security_get_users_in_security_group_v2_with_http_info(groupid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str groupid: Specify the Security Group ID. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(UserReadV2Response, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['groupid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method security_get_users_in_security_group_v2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'groupid' is set
        if self.api_client.client_side_validation and ('groupid' not in local_var_params or  # noqa: E501
                                                        local_var_params['groupid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `groupid` when calling `security_get_users_in_security_group_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'groupid' in local_var_params:
            path_params['groupid'] = local_var_params['groupid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V2/getusersinsecuritygroup/groupid/{groupid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserReadV2Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
