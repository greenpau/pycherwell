# coding: utf-8

"""
    Cherwell REST API

    Unofficial Python Cherwell REST API library.  # noqa: E501

    The version of the OpenAPI document: 9.3.2
    Contact: See AUTHORS.
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pycherwell.api_client import ApiClient
from pycherwell.exceptions import (
    ApiTypeError,
    ApiValueError
)


class CoreApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def core_delete_gallery_image_by_stand_in_key_v1(self, standinkey, **kwargs):  # noqa: E501
        """Delete a gallery image  # noqa: E501

        Endpoint to delete a gallery image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_delete_gallery_image_by_stand_in_key_v1(standinkey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str standinkey: The StandIn key for the gallery image to delete. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_delete_gallery_image_by_stand_in_key_v1_with_http_info(standinkey, **kwargs)  # noqa: E501

    def core_delete_gallery_image_by_stand_in_key_v1_with_http_info(self, standinkey, **kwargs):  # noqa: E501
        """Delete a gallery image  # noqa: E501

        Endpoint to delete a gallery image.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_delete_gallery_image_by_stand_in_key_v1_with_http_info(standinkey, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str standinkey: The StandIn key for the gallery image to delete. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['standinkey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_delete_gallery_image_by_stand_in_key_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'standinkey' is set
        if self.api_client.client_side_validation and ('standinkey' not in local_var_params or  # noqa: E501
                                                        local_var_params['standinkey'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `standinkey` when calling `core_delete_gallery_image_by_stand_in_key_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'standinkey' in local_var_params:
            path_params['standinkey'] = local_var_params['standinkey']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/deletegalleryimage/standinkey/{standinkey}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_gallery_image_v1(self, name, **kwargs):  # noqa: E501
        """Get built-in images  # noqa: E501

        Operation that gets built-in images. If you are requesting an icon (.ico), you can specify width and height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_image_v1(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Image name and folder location in the Image Manager. Parameter must begin with \"[PlugIn]Images;\" and then a period-separated list of folders. Example: \"[PlugIn]Images;Images.Common.Cherwell.ico\". (required)
        :param int width: Specify the width (icons only).
        :param int height: Specify the height (icons only).
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_gallery_image_v1_with_http_info(name, **kwargs)  # noqa: E501

    def core_get_gallery_image_v1_with_http_info(self, name, **kwargs):  # noqa: E501
        """Get built-in images  # noqa: E501

        Operation that gets built-in images. If you are requesting an icon (.ico), you can specify width and height.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_image_v1_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str name: Image name and folder location in the Image Manager. Parameter must begin with \"[PlugIn]Images;\" and then a period-separated list of folders. Example: \"[PlugIn]Images;Images.Common.Cherwell.ico\". (required)
        :param int width: Specify the width (icons only).
        :param int height: Specify the height (icons only).
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'width', 'height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_gallery_image_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `core_get_gallery_image_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'width' in local_var_params and local_var_params['width'] is not None:  # noqa: E501
            query_params.append(('width', local_var_params['width']))  # noqa: E501
        if 'height' in local_var_params and local_var_params['height'] is not None:  # noqa: E501
            query_params.append(('height', local_var_params['height']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getgalleryimage/name/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_gallery_images_folder_v1(self, scope, scopeowner, folder, **kwargs):  # noqa: E501
        """Get gallery images by scope, scopeowner, and folder  # noqa: E501

        Get gallery images for the specified scope, scopeowner, and folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_folder_v1(scope, scopeowner, folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get gallery images for. (required)
        :param str scopeowner: the scopeowner to get gallery images for. (required)
        :param str folder: The folder to get gallery images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_gallery_images_folder_v1_with_http_info(scope, scopeowner, folder, **kwargs)  # noqa: E501

    def core_get_gallery_images_folder_v1_with_http_info(self, scope, scopeowner, folder, **kwargs):  # noqa: E501
        """Get gallery images by scope, scopeowner, and folder  # noqa: E501

        Get gallery images for the specified scope, scopeowner, and folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_folder_v1_with_http_info(scope, scopeowner, folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get gallery images for. (required)
        :param str scopeowner: the scopeowner to get gallery images for. (required)
        :param str folder: The folder to get gallery images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'scopeowner', 'folder', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_gallery_images_folder_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_gallery_images_folder_v1`")  # noqa: E501
        # verify the required parameter 'scopeowner' is set
        if self.api_client.client_side_validation and ('scopeowner' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeowner'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeowner` when calling `core_get_gallery_images_folder_v1`")  # noqa: E501
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder` when calling `core_get_gallery_images_folder_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'scopeowner' in local_var_params:
            path_params['scopeowner'] = local_var_params['scopeowner']  # noqa: E501
        if 'folder' in local_var_params:
            path_params['folder'] = local_var_params['folder']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getgalleryimages/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_gallery_images_scope_owner_v1(self, scope, scopeowner, **kwargs):  # noqa: E501
        """Get gallery images by scope and scopeowner  # noqa: E501

        Get all gallery images for the specified scope and scope owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_scope_owner_v1(scope, scopeowner, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get gallery images for. (required)
        :param str scopeowner: The scopeowner to get gallery images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_gallery_images_scope_owner_v1_with_http_info(scope, scopeowner, **kwargs)  # noqa: E501

    def core_get_gallery_images_scope_owner_v1_with_http_info(self, scope, scopeowner, **kwargs):  # noqa: E501
        """Get gallery images by scope and scopeowner  # noqa: E501

        Get all gallery images for the specified scope and scope owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_scope_owner_v1_with_http_info(scope, scopeowner, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get gallery images for. (required)
        :param str scopeowner: The scopeowner to get gallery images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'scopeowner', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_gallery_images_scope_owner_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_gallery_images_scope_owner_v1`")  # noqa: E501
        # verify the required parameter 'scopeowner' is set
        if self.api_client.client_side_validation and ('scopeowner' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeowner'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeowner` when calling `core_get_gallery_images_scope_owner_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'scopeowner' in local_var_params:
            path_params['scopeowner'] = local_var_params['scopeowner']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getgalleryimages/scope/{scope}/scopeowner/{scopeowner}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_gallery_images_scope_v1(self, scope, **kwargs):  # noqa: E501
        """Get gallery images by scope  # noqa: E501

        Get all gallery images for the specified scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_scope_v1(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get the images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_gallery_images_scope_v1_with_http_info(scope, **kwargs)  # noqa: E501

    def core_get_gallery_images_scope_v1_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get gallery images by scope  # noqa: E501

        Get all gallery images for the specified scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_scope_v1_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope to get the images for. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_gallery_images_scope_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_gallery_images_scope_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getgalleryimages/scope/{scope}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_gallery_images_v1(self, **kwargs):  # noqa: E501
        """Get all gallery images  # noqa: E501

        Get all the gallery images in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_gallery_images_v1_with_http_info(**kwargs)  # noqa: E501

    def core_get_gallery_images_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get all gallery images  # noqa: E501

        Get all the gallery images in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_gallery_images_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_gallery_images_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getgalleryimages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_stored_value_v1(self, stand_in_key, **kwargs):  # noqa: E501
        """Get a  stored value  # noqa: E501

        Get a stored value by its StandIn key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_value_v1(stand_in_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str stand_in_key: The StandIn key for the Stored Value you would like to retrieve. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: StoredValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_stored_value_v1_with_http_info(stand_in_key, **kwargs)  # noqa: E501

    def core_get_stored_value_v1_with_http_info(self, stand_in_key, **kwargs):  # noqa: E501
        """Get a  stored value  # noqa: E501

        Get a stored value by its StandIn key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_value_v1_with_http_info(stand_in_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str stand_in_key: The StandIn key for the Stored Value you would like to retrieve. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(StoredValueResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['stand_in_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_stored_value_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'stand_in_key' is set
        if self.api_client.client_side_validation and ('stand_in_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['stand_in_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `stand_in_key` when calling `core_get_stored_value_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'stand_in_key' in local_var_params:
            path_params['standInKey'] = local_var_params['stand_in_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getstoredvalue/standinkey/{standInKey}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredValueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_stored_values_folder_v1(self, scope, scopeowner, folder, **kwargs):  # noqa: E501
        """Get stored values by folder  # noqa: E501

        Get stored values for the specified folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_folder_v1(scope, scopeowner, folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param str scopeowner: The scope owner for which to get stored values. (required)
        :param str folder: The folder for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_stored_values_folder_v1_with_http_info(scope, scopeowner, folder, **kwargs)  # noqa: E501

    def core_get_stored_values_folder_v1_with_http_info(self, scope, scopeowner, folder, **kwargs):  # noqa: E501
        """Get stored values by folder  # noqa: E501

        Get stored values for the specified folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_folder_v1_with_http_info(scope, scopeowner, folder, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param str scopeowner: The scope owner for which to get stored values. (required)
        :param str folder: The folder for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'scopeowner', 'folder', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_stored_values_folder_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_stored_values_folder_v1`")  # noqa: E501
        # verify the required parameter 'scopeowner' is set
        if self.api_client.client_side_validation and ('scopeowner' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeowner'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeowner` when calling `core_get_stored_values_folder_v1`")  # noqa: E501
        # verify the required parameter 'folder' is set
        if self.api_client.client_side_validation and ('folder' not in local_var_params or  # noqa: E501
                                                        local_var_params['folder'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `folder` when calling `core_get_stored_values_folder_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'scopeowner' in local_var_params:
            path_params['scopeowner'] = local_var_params['scopeowner']  # noqa: E501
        if 'folder' in local_var_params:
            path_params['folder'] = local_var_params['folder']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/storedvalues/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_stored_values_scope_owner_v1(self, scope, scopeowner, **kwargs):  # noqa: E501
        """Get stored values by scope owner  # noqa: E501

        Get stored values for the specified scope and scope owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_scope_owner_v1(scope, scopeowner, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param str scopeowner: The scope owner for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_stored_values_scope_owner_v1_with_http_info(scope, scopeowner, **kwargs)  # noqa: E501

    def core_get_stored_values_scope_owner_v1_with_http_info(self, scope, scopeowner, **kwargs):  # noqa: E501
        """Get stored values by scope owner  # noqa: E501

        Get stored values for the specified scope and scope owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_scope_owner_v1_with_http_info(scope, scopeowner, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param str scopeowner: The scope owner for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'scopeowner', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_stored_values_scope_owner_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_stored_values_scope_owner_v1`")  # noqa: E501
        # verify the required parameter 'scopeowner' is set
        if self.api_client.client_side_validation and ('scopeowner' not in local_var_params or  # noqa: E501
                                                        local_var_params['scopeowner'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scopeowner` when calling `core_get_stored_values_scope_owner_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501
        if 'scopeowner' in local_var_params:
            path_params['scopeowner'] = local_var_params['scopeowner']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/storedvalues/scope/{scope}/scopeowner/{scopeowner}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_stored_values_scope_v1(self, scope, **kwargs):  # noqa: E501
        """Get stored values by scope  # noqa: E501

        Get all the stored values for the specified scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_scope_v1(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_stored_values_scope_v1_with_http_info(scope, **kwargs)  # noqa: E501

    def core_get_stored_values_scope_v1_with_http_info(self, scope, **kwargs):  # noqa: E501
        """Get stored values by scope  # noqa: E501

        Get all the stored values for the specified scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_scope_v1_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str scope: The scope for which to get stored values. (required)
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['scope', 'links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_stored_values_scope_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'scope' is set
        if self.api_client.client_side_validation and ('scope' not in local_var_params or  # noqa: E501
                                                        local_var_params['scope'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `scope` when calling `core_get_stored_values_scope_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope' in local_var_params:
            path_params['scope'] = local_var_params['scope']  # noqa: E501

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/storedvalues/scope/{scope}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_stored_values_v1(self, **kwargs):  # noqa: E501
        """Gets all the stored values in the system  # noqa: E501

        Get all the stored values in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ManagerData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_stored_values_v1_with_http_info(**kwargs)  # noqa: E501

    def core_get_stored_values_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all the stored values in the system  # noqa: E501

        Get all the stored values in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_stored_values_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param bool links: Flag to include hyperlinks in results. Default is false.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ManagerData, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['links']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_stored_values_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'links' in local_var_params and local_var_params['links'] is not None:  # noqa: E501
            query_params.append(('links', local_var_params['links']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/storedvalues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagerData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_get_views_v1(self, **kwargs):  # noqa: E501
        """Get a list of the views  # noqa: E501

        Operation to get a list of views that are configured in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_views_v1(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ViewsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_get_views_v1_with_http_info(**kwargs)  # noqa: E501

    def core_get_views_v1_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of the views  # noqa: E501

        Operation to get a list of views that are configured in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_get_views_v1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ViewsResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_get_views_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/getviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ViewsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_save_gallery_image_v1(self, save_gallery_image_request, **kwargs):  # noqa: E501
        """Create or update a gallery image  # noqa: E501

        Endpoint to Create or update a gallery image. To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.</br>There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.</br>To use the Url image type,  provide the full network share path to the file in the Name property, ie: \"\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>To use the File image type, provide the full path to the file in the Name property, ie: \"C:\\\\\\somefolder\\\\\\somfile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>When creating or updating an image, Name and ImageType are always required, and if the image type is \"Imported\", then the Base64EncodedImageData is also required. </br>scope, scopeowner, and folder can all be updated independently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_save_gallery_image_v1(save_gallery_image_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SaveGalleryImageRequest save_gallery_image_request: To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.</br>There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.</br>To use the Url image type,  provide the full network share path to the file in the Name property, ie: \"\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>To use the File image type, provide the full path to the file in the Name property, ie: \"C:\\\\\\somefolder\\\\\\somfile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>When creating or updating an image, Name and ImageType are always required, and if the image type is \"Imported\", then the Base64EncodedImageData is also required. </br>scope, scopeowner, and folder can all be updated independently. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SaveGalleryImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_save_gallery_image_v1_with_http_info(save_gallery_image_request, **kwargs)  # noqa: E501

    def core_save_gallery_image_v1_with_http_info(self, save_gallery_image_request, **kwargs):  # noqa: E501
        """Create or update a gallery image  # noqa: E501

        Endpoint to Create or update a gallery image. To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.</br>There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.</br>To use the Url image type,  provide the full network share path to the file in the Name property, ie: \"\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>To use the File image type, provide the full path to the file in the Name property, ie: \"C:\\\\\\somefolder\\\\\\somfile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>When creating or updating an image, Name and ImageType are always required, and if the image type is \"Imported\", then the Base64EncodedImageData is also required. </br>scope, scopeowner, and folder can all be updated independently.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_save_gallery_image_v1_with_http_info(save_gallery_image_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SaveGalleryImageRequest save_gallery_image_request: To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.</br>There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.</br>To use the Url image type,  provide the full network share path to the file in the Name property, ie: \"\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>To use the File image type, provide the full path to the file in the Name property, ie: \"C:\\\\\\somefolder\\\\\\somfile.jpg\". If the file is not accessible to all users it will not visible to all users.</br>When creating or updating an image, Name and ImageType are always required, and if the image type is \"Imported\", then the Base64EncodedImageData is also required. </br>scope, scopeowner, and folder can all be updated independently. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SaveGalleryImageResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['save_gallery_image_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_save_gallery_image_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'save_gallery_image_request' is set
        if self.api_client.client_side_validation and ('save_gallery_image_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['save_gallery_image_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `save_gallery_image_request` when calling `core_save_gallery_image_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'save_gallery_image_request' in local_var_params:
            body_params = local_var_params['save_gallery_image_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/savegalleryimage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveGalleryImageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_save_stored_value_v1(self, save_stored_value_request, **kwargs):  # noqa: E501
        """Create or update a stored value  # noqa: E501

        Operation to create or update a stored value. To update, specify the StandIn key for the stored value to update. To create leave StandIn key blank, and provide a name, a scope, a type, and a value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_save_stored_value_v1(save_stored_value_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SaveStoredValueRequest save_stored_value_request: The stored value to create or update. To update include the StandIn key for the associated stored value. To create, name, scope, type, and value are required. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: StoredValueResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_save_stored_value_v1_with_http_info(save_stored_value_request, **kwargs)  # noqa: E501

    def core_save_stored_value_v1_with_http_info(self, save_stored_value_request, **kwargs):  # noqa: E501
        """Create or update a stored value  # noqa: E501

        Operation to create or update a stored value. To update, specify the StandIn key for the stored value to update. To create leave StandIn key blank, and provide a name, a scope, a type, and a value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_save_stored_value_v1_with_http_info(save_stored_value_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param SaveStoredValueRequest save_stored_value_request: The stored value to create or update. To update include the StandIn key for the associated stored value. To create, name, scope, type, and value are required. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(StoredValueResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['save_stored_value_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_save_stored_value_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'save_stored_value_request' is set
        if self.api_client.client_side_validation and ('save_stored_value_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['save_stored_value_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `save_stored_value_request` when calling `core_save_stored_value_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'save_stored_value_request' in local_var_params:
            body_params = local_var_params['save_stored_value_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/savestoredvalue', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StoredValueResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def core_set_culture_v1(self, culturecode, **kwargs):  # noqa: E501
        """Set the culture for the current user  # noqa: E501

        Operation to update the current users culture by culture code. This returns a new access token that has the updated information in it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_set_culture_v1(culturecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str culturecode: The culture code to set for the current user. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.core_set_culture_v1_with_http_info(culturecode, **kwargs)  # noqa: E501

    def core_set_culture_v1_with_http_info(self, culturecode, **kwargs):  # noqa: E501
        """Set the culture for the current user  # noqa: E501

        Operation to update the current users culture by culture code. This returns a new access token that has the updated information in it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.core_set_culture_v1_with_http_info(culturecode, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str culturecode: The culture code to set for the current user. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['culturecode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method core_set_culture_v1" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'culturecode' is set
        if self.api_client.client_side_validation and ('culturecode' not in local_var_params or  # noqa: E501
                                                        local_var_params['culturecode'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `culturecode` when calling `core_set_culture_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'culturecode' in local_var_params:
            path_params['culturecode'] = local_var_params['culturecode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/V1/setculture/culturecode/{culturecode}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
